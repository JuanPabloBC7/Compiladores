/* The following code was generated by JFlex 1.6.1 */

package Proyecto;
import java_cup.runtime.*;
import java.io.Reader;
import static Proyecto.Token.*;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/Users/jpbalan/Documents/NetBeansProjects/Compiladores/Compiladores/src/Proyecto/F3_MiniSQL_F.flex</tt>
 */
class F3_MiniSQL_F implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\71\1\44\1\72\1\72\1\71\22\0\1\71\1\55\1\0"+
    "\1\70\1\0\1\51\1\56\1\43\1\63\1\64\1\46\1\50\1\60"+
    "\1\47\1\40\1\45\1\37\1\37\10\35\1\0\1\61\1\52\1\53"+
    "\1\54\1\0\1\67\1\1\1\2\1\11\1\14\1\10\1\30\1\22"+
    "\1\17\1\12\1\32\1\23\1\5\1\27\1\13\1\4\1\24\1\33"+
    "\1\15\1\3\1\7\1\6\1\21\1\25\1\31\1\16\1\20\1\57"+
    "\1\0\1\62\1\0\1\26\1\0\4\34\1\41\25\34\1\65\1\42"+
    "\1\66\7\0\1\72\113\0\1\36\37\0\1\36\u1f36\0\1\72\1\72"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\31\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\1\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\2\1\32\2\2\1\33"+
    "\13\2\1\34\16\2\1\35\1\36\2\2\1\37\11\2"+
    "\1\40\20\2\1\41\1\42\2\2\1\43\1\2\1\44"+
    "\26\2\1\45\35\2\1\46\1\47\1\0\1\50\2\0"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\2\2\1\63\1\64\3\2\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\5\2\1\73\5\2\1\74"+
    "\3\2\1\75\11\2\1\76\1\77\6\2\1\100\13\2"+
    "\1\101\10\2\1\102\14\2\1\103\26\2\1\104\11\2"+
    "\1\105\7\2\1\106\7\2\1\107\35\2\1\110\2\2"+
    "\1\111\2\2\1\112\20\2\1\113\3\2\1\114\3\2"+
    "\1\115\11\2\1\0\1\116\2\0\7\2\1\117\1\120"+
    "\5\2\1\121\1\122\13\2\1\123\13\2\1\124\1\2"+
    "\1\125\1\2\1\126\1\2\1\127\1\2\1\130\4\2"+
    "\1\131\1\2\1\132\1\2\1\133\13\2\1\134\1\2"+
    "\1\135\1\136\2\2\1\137\2\2\1\140\1\2\1\141"+
    "\5\2\1\142\2\2\1\143\1\144\1\145\23\2\1\146"+
    "\3\2\1\147\16\2\1\150\1\2\1\151\1\2\1\152"+
    "\2\2\1\153\1\154\2\2\1\155\1\2\1\156\4\2"+
    "\1\157\5\2\1\160\1\161\3\2\1\162\2\2\1\163"+
    "\1\164\1\165\11\2\1\166\2\2\1\167\1\170\4\2"+
    "\1\171\1\172\4\2\1\173\3\2\1\174\3\2\1\175"+
    "\10\2\1\176\1\177\1\2\1\200\16\2\1\201\3\2"+
    "\1\202\1\2\1\203\1\2\1\204\1\46\2\0\3\2"+
    "\1\205\4\2\1\206\2\2\1\207\15\2\1\210\3\2"+
    "\1\211\2\2\1\212\2\2\1\213\11\2\1\214\1\215"+
    "\1\2\1\216\1\2\1\217\1\220\1\221\4\2\1\222"+
    "\1\223\31\2\1\224\10\2\1\225\3\2\1\226\3\2"+
    "\1\227\7\2\1\230\1\231\1\2\1\232\4\2\1\233"+
    "\5\2\1\234\40\2\1\235\2\2\1\236\4\2\1\237"+
    "\1\240\6\2\1\241\4\2\1\242\1\243\4\2\1\244"+
    "\1\2\1\245\1\246\1\247\1\250\1\2\1\251\2\2"+
    "\1\252\1\253\3\2\1\254\1\2\1\255\1\2\1\256"+
    "\1\2\1\46\4\2\1\257\1\260\2\2\1\261\2\2"+
    "\1\262\1\2\1\263\1\2\1\264\3\2\1\265\1\266"+
    "\7\2\1\267\2\2\1\270\10\2\1\271\1\272\2\2"+
    "\1\273\15\2\1\274\2\2\1\275\3\2\1\276\1\277"+
    "\4\2\1\300\7\2\1\301\1\2\1\302\1\2\1\303"+
    "\5\2\1\304\15\2\1\305\2\2\1\306\1\307\3\2"+
    "\1\310\22\2\1\311\2\2\1\312\1\313\2\2\1\314"+
    "\1\2\1\315\3\2\1\316\1\317\1\320\2\2\1\321"+
    "\13\2\1\322\1\323\13\2\1\324\3\2\1\325\1\326"+
    "\1\2\1\327\7\2\1\330\6\2\1\331\1\2\1\332"+
    "\1\2\1\333\1\334\1\335\2\2\1\336\10\2\1\337"+
    "\5\2\1\340\1\341\1\2\1\342\1\343\1\2\1\344"+
    "\4\2\1\345\1\346\1\2\1\347\1\2\1\350\7\2"+
    "\1\351\1\352\4\2\1\353\2\2\1\354\1\2\1\355"+
    "\5\2\1\356\1\357\1\360\6\2\1\361\6\2\1\362"+
    "\2\2\1\363\5\2\1\364\1\2\1\365\1\366\1\2"+
    "\1\367\3\2\1\370\1\2\1\371\1\372\4\2\1\373"+
    "\1\374\4\2\1\375\1\2\1\376\11\2\1\377\1\u0100"+
    "\1\u0101\1\u0102\2\2\1\u0103\4\2\1\u0104\3\2\1\u0105"+
    "\2\2\1\u0106\2\2\1\u0107\3\2\1\u0108\1\u0109\1\2"+
    "\1\u010a\1\u010b\2\2\1\u010c\1\u010d\12\2\1\u010e\2\2"+
    "\1\u010f\1\2\1\u0110\2\2\1\u0111\1\2\1\u0112\3\2"+
    "\1\u0113\1\2\1\u0114\3\2\1\u0115\1\u0116\1\2\1\u0117"+
    "\1\2\1\u0118\1\u0119\4\2\1\u011a\1\u011b\1\u011c\1\2"+
    "\1\u011d\4\2\1\u011e\2\2\1\u011f\1\2\1\u0120\1\u0121"+
    "\2\2\1\u0122\14\2\1\u0123\2\2\1\u0124\1\u0125\2\2"+
    "\1\u0126\4\2\1\u0127\1\u0128\4\2\1\u0129\3\2\1\u012a"+
    "\2\2\1\u012b\1\2\1\u012c\1\u012d\1\u012e\2\2\1\u012f"+
    "\11\2\1\u0130\1\2\1\u0131\1\2\1\u0132\2\2\1\u0133"+
    "\1\u0134\2\2\1\u0135\5\2\1\u0136\1\u0137\6\2\1\u0138"+
    "\1\2\1\u0139\1\2\1\u013a\1\u013b\7\2\1\u013c\1\u013d"+
    "\1\2\1\u013e\6\2\1\u013f\5\2\1\u0140\1\u0141\1\2"+
    "\1\u0142\2\2\1\u0143\1\u0144\2\2\1\u0145\1\u0146\3\2"+
    "\1\u0147\7\2\1\u0148\2\2\1\u0149\2\2\1\u014a\1\u014b"+
    "\1\u014c\1\2\1\u014d\6\2\1\u014e\1\u014f\1\u0150\1\2"+
    "\1\u0151\2\2\1\u0152\1\u0153\1\u0154\1\u0155\5\2\1\u0156"+
    "\3\2\1\u0157\1\u0158\3\2\1\u0159\2\2\1\u015a\1\u015b"+
    "\1\u015c\2\2\1\u015d\1\2\1\u015e\1\u015f\1\u0160\1\2"+
    "\1\u0161\1\u0162\3\2\1\u0163\1\2\1\u0164\1\u0165\4\2"+
    "\1\u0166\2\2\1\u0167\7\2\1\u0168\2\2\1\u0169\4\2"+
    "\1\u016a\3\2\1\u016b\3\2\1\u016c\13\2\1\u016d\1\u016e"+
    "\1\2\1\u016f\5\2\1\u0170";

  private static int [] zzUnpackAction() {
    int [] result = new int[1497];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0639\0\73\0\u0674\0\u06af"+
    "\0\73\0\u06ea\0\73\0\u0725\0\73\0\73\0\u0760\0\u079b"+
    "\0\u07d6\0\u0811\0\u084c\0\u0887\0\73\0\73\0\73\0\u08c2"+
    "\0\73\0\u08fd\0\73\0\73\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u05c3\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u05c3\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab"+
    "\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u05c3"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0"+
    "\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80"+
    "\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58"+
    "\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308"+
    "\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\73"+
    "\0\u06af\0\73\0\u24e0\0\u251b\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\u2556\0\u2591"+
    "\0\u05c3\0\u25cc\0\u2607\0\u2642\0\u267d\0\u05c3\0\u05c3\0\u05c3"+
    "\0\u05c3\0\u05c3\0\u05c3\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4"+
    "\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u05c3\0\u2941"+
    "\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19"+
    "\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1"+
    "\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1"+
    "\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279"+
    "\0\u32b4\0\u05c3\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416"+
    "\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee"+
    "\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6"+
    "\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e"+
    "\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76"+
    "\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u05c3"+
    "\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u05c3"+
    "\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088"+
    "\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260"+
    "\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438"+
    "\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610"+
    "\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u05c3\0\u4772\0\u47ad"+
    "\0\u47e8\0\u4823\0\u485e\0\u05c3\0\u4899\0\u48d4\0\u490f\0\u494a"+
    "\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22"+
    "\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u05c3\0\u4c49\0\u4c84\0\u4cbf"+
    "\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97"+
    "\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034\0\u506f"+
    "\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1\0\u520c"+
    "\0\u5247\0\u05c3\0\u05c3\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e"+
    "\0\u05c3\0\u05c3\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0"+
    "\0\u550b\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u05c3\0\u5632\0\u566d"+
    "\0\u56a8\0\u56e3\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845"+
    "\0\u5880\0\u05c3\0\u58bb\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u05c3"+
    "\0\u59e2\0\u05c3\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u05c3\0\u5b09"+
    "\0\u05c3\0\u5b44\0\u05c3\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b"+
    "\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43"+
    "\0\u5e7e\0\u05c3\0\u5eb9\0\u5ef4\0\u05c3\0\u5f2f\0\u5f6a\0\u05c3"+
    "\0\u5fa5\0\u05c3\0\u5fe0\0\u601b\0\u6056\0\u6091\0\u60cc\0\u6107"+
    "\0\u6142\0\u617d\0\u05c3\0\u05c3\0\u05c3\0\u61b8\0\u61f3\0\u622e"+
    "\0\u6269\0\u62a4\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb\0\u6406"+
    "\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d\0\u6568\0\u65a3\0\u65de"+
    "\0\u6619\0\u6654\0\u668f\0\u66ca\0\u05c3\0\u6705\0\u6740\0\u677b"+
    "\0\u67b6\0\u67f1\0\u682c\0\u6867\0\u68a2\0\u68dd\0\u6918\0\u6953"+
    "\0\u698e\0\u69c9\0\u6a04\0\u05c3\0\u6a3f\0\u6a7a\0\u6ab5\0\u05c3"+
    "\0\u6af0\0\u6b2b\0\u05c3\0\u05c3\0\u6b66\0\u6ba1\0\u05c3\0\u6bdc"+
    "\0\u6c17\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\u05c3\0\u6d3e\0\u6d79"+
    "\0\u6db4\0\u6def\0\u6e2a\0\u05c3\0\u05c3\0\u6e65\0\u6ea0\0\u6edb"+
    "\0\u05c3\0\u6f16\0\u6f51\0\u05c3\0\u05c3\0\u6f8c\0\u6fc7\0\u7002"+
    "\0\u703d\0\u7078\0\u70b3\0\u70ee\0\u7129\0\u7164\0\u719f\0\u05c3"+
    "\0\u71da\0\u7215\0\u05c3\0\u05c3\0\u7250\0\u728b\0\u72c6\0\u7301"+
    "\0\u05c3\0\u05c3\0\u733c\0\u7377\0\u73b2\0\u73ed\0\u05c3\0\u7428"+
    "\0\u7463\0\u749e\0\u05c3\0\u74d9\0\u7514\0\u754f\0\u758a\0\u75c5"+
    "\0\u7600\0\u763b\0\u7676\0\u76b1\0\u76ec\0\u7727\0\u7762\0\u05c3"+
    "\0\u779d\0\u77d8\0\u7813\0\u784e\0\u7889\0\u78c4\0\u78ff\0\u793a"+
    "\0\u7975\0\u79b0\0\u79eb\0\u7a26\0\u7a61\0\u7a9c\0\u7ad7\0\u7b12"+
    "\0\u7b4d\0\u05c3\0\u7b88\0\u7bc3\0\u7bfe\0\u05c3\0\u7c39\0\u05c3"+
    "\0\u7c74\0\u05c3\0\u7caf\0\u7cea\0\u7d25\0\u7d60\0\u7d9b\0\u7dd6"+
    "\0\u05c3\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2\0\u05c3\0\u7efd\0\u7f38"+
    "\0\u05c3\0\u7f73\0\u7fae\0\u7fe9\0\u8024\0\u805f\0\u809a\0\u80d5"+
    "\0\u8110\0\u814b\0\u8186\0\u81c1\0\u81fc\0\u8237\0\u05c3\0\u8272"+
    "\0\u82ad\0\u82e8\0\u05c3\0\u8323\0\u835e\0\u05c3\0\u8399\0\u83d4"+
    "\0\u05c3\0\u840f\0\u844a\0\u8485\0\u84c0\0\u84fb\0\u8536\0\u8571"+
    "\0\u85ac\0\u85e7\0\u05c3\0\u05c3\0\u8622\0\u05c3\0\u865d\0\u05c3"+
    "\0\u05c3\0\u05c3\0\u8698\0\u86d3\0\u870e\0\u8749\0\u05c3\0\u8784"+
    "\0\u87bf\0\u87fa\0\u8835\0\u8870\0\u88ab\0\u88e6\0\u8921\0\u895c"+
    "\0\u8997\0\u89d2\0\u8a0d\0\u8a48\0\u8a83\0\u8abe\0\u8af9\0\u8b34"+
    "\0\u8b6f\0\u8baa\0\u8be5\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c"+
    "\0\u8d47\0\u05c3\0\u8d82\0\u8dbd\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9"+
    "\0\u8ee4\0\u8f1f\0\u05c3\0\u8f5a\0\u8f95\0\u8fd0\0\u05c3\0\u900b"+
    "\0\u9046\0\u9081\0\u90bc\0\u90f7\0\u9132\0\u916d\0\u91a8\0\u91e3"+
    "\0\u921e\0\u9259\0\u05c3\0\u05c3\0\u9294\0\u05c3\0\u92cf\0\u930a"+
    "\0\u9345\0\u9380\0\u05c3\0\u93bb\0\u93f6\0\u9431\0\u946c\0\u94a7"+
    "\0\u05c3\0\u94e2\0\u951d\0\u9558\0\u9593\0\u95ce\0\u9609\0\u9644"+
    "\0\u967f\0\u96ba\0\u96f5\0\u9730\0\u976b\0\u97a6\0\u97e1\0\u981c"+
    "\0\u9857\0\u9892\0\u98cd\0\u9908\0\u9943\0\u997e\0\u99b9\0\u99f4"+
    "\0\u9a2f\0\u9a6a\0\u9aa5\0\u9ae0\0\u9b1b\0\u9b56\0\u9b91\0\u9bcc"+
    "\0\u9c07\0\u05c3\0\u9c42\0\u9c7d\0\u9cb8\0\u9cf3\0\u9d2e\0\u9d69"+
    "\0\u9da4\0\u05c3\0\u05c3\0\u9ddf\0\u9e1a\0\u9e55\0\u9e90\0\u9ecb"+
    "\0\u9f06\0\u05c3\0\u9f41\0\u9f7c\0\u9fb7\0\u9ff2\0\u05c3\0\u05c3"+
    "\0\ua02d\0\ua068\0\ua0a3\0\ua0de\0\ua119\0\ua154\0\u05c3\0\u05c3"+
    "\0\u05c3\0\u05c3\0\ua18f\0\u05c3\0\ua1ca\0\ua205\0\u05c3\0\u05c3"+
    "\0\ua240\0\ua27b\0\ua2b6\0\u05c3\0\ua2f1\0\u05c3\0\ua32c\0\u05c3"+
    "\0\ua367\0\ua3a2\0\ua3dd\0\ua418\0\ua453\0\ua48e\0\u05c3\0\u05c3"+
    "\0\ua4c9\0\ua504\0\u05c3\0\ua53f\0\ua57a\0\u05c3\0\ua5b5\0\u05c3"+
    "\0\ua5f0\0\u05c3\0\ua62b\0\ua666\0\ua6a1\0\ua6dc\0\u05c3\0\ua717"+
    "\0\ua752\0\ua78d\0\ua7c8\0\ua803\0\ua83e\0\ua879\0\u05c3\0\ua8b4"+
    "\0\ua8ef\0\u05c3\0\ua92a\0\ua965\0\ua9a0\0\ua9db\0\uaa16\0\uaa51"+
    "\0\uaa8c\0\uaac7\0\u05c3\0\u05c3\0\uab02\0\uab3d\0\uab78\0\uabb3"+
    "\0\uabee\0\uac29\0\uac64\0\uac9f\0\uacda\0\uad15\0\uad50\0\uad8b"+
    "\0\uadc6\0\uae01\0\uae3c\0\uae77\0\u05c3\0\uaeb2\0\uaeed\0\u05c3"+
    "\0\uaf28\0\uaf63\0\uaf9e\0\uafd9\0\u05c3\0\ub014\0\ub04f\0\ub08a"+
    "\0\ub0c5\0\u05c3\0\ub100\0\ub13b\0\ub176\0\ub1b1\0\ub1ec\0\ub227"+
    "\0\ub262\0\u05c3\0\ub29d\0\u05c3\0\ub2d8\0\u05c3\0\ub313\0\ub34e"+
    "\0\ub389\0\ub3c4\0\ub3ff\0\u05c3\0\ub43a\0\ub475\0\ub4b0\0\ub4eb"+
    "\0\ub526\0\ub561\0\ub59c\0\ub5d7\0\ub612\0\ub64d\0\ub688\0\ub6c3"+
    "\0\ub6fe\0\u05c3\0\ub739\0\ub774\0\u05c3\0\u05c3\0\ub7af\0\ub7ea"+
    "\0\ub825\0\u05c3\0\ub860\0\ub89b\0\ub8d6\0\ub911\0\ub94c\0\ub987"+
    "\0\ub9c2\0\ub9fd\0\uba38\0\uba73\0\ubaae\0\ubae9\0\ubb24\0\ubb5f"+
    "\0\ubb9a\0\ubbd5\0\ubc10\0\ubc4b\0\ubc86\0\ubcc1\0\ubcfc\0\u05c3"+
    "\0\u05c3\0\ubd37\0\ubd72\0\u05c3\0\ubdad\0\u05c3\0\ubde8\0\ube23"+
    "\0\ube5e\0\u05c3\0\u05c3\0\u05c3\0\ube99\0\ubed4\0\u05c3\0\ubf0f"+
    "\0\ubf4a\0\ubf85\0\ubfc0\0\ubffb\0\uc036\0\uc071\0\uc0ac\0\uc0e7"+
    "\0\uc122\0\uc15d\0\u05c3\0\u05c3\0\uc198\0\uc1d3\0\uc20e\0\uc249"+
    "\0\uc284\0\uc2bf\0\uc2fa\0\uc335\0\uc370\0\uc3ab\0\uc3e6\0\u05c3"+
    "\0\uc421\0\uc45c\0\uc497\0\uc4d2\0\u05c3\0\uc50d\0\u05c3\0\uc548"+
    "\0\uc583\0\uc5be\0\uc5f9\0\uc634\0\uc66f\0\uc6aa\0\u05c3\0\uc6e5"+
    "\0\uc720\0\uc75b\0\uc796\0\uc7d1\0\uc80c\0\u05c3\0\uc847\0\u05c3"+
    "\0\uc882\0\u05c3\0\u05c3\0\u05c3\0\uc8bd\0\uc8f8\0\u05c3\0\uc933"+
    "\0\uc96e\0\uc9a9\0\uc9e4\0\uca1f\0\uca5a\0\uca95\0\ucad0\0\u05c3"+
    "\0\ucb0b\0\ucb46\0\ucb81\0\ucbbc\0\ucbf7\0\u05c3\0\u05c3\0\ucc32"+
    "\0\ucc6d\0\u05c3\0\ucca8\0\u05c3\0\ucce3\0\ucd1e\0\ucd59\0\ucd94"+
    "\0\ucdcf\0\u05c3\0\uce0a\0\u05c3\0\uce45\0\uce80\0\ucebb\0\ucef6"+
    "\0\ucf31\0\ucf6c\0\ucfa7\0\ucfe2\0\ud01d\0\u05c3\0\u05c3\0\ud058"+
    "\0\ud093\0\ud0ce\0\ud109\0\u05c3\0\ud144\0\ud17f\0\u05c3\0\ud1ba"+
    "\0\u05c3\0\ud1f5\0\ud230\0\ud26b\0\ud2a6\0\ud2e1\0\u05c3\0\u05c3"+
    "\0\u05c3\0\ud31c\0\ud357\0\ud392\0\ud3cd\0\ud408\0\ud443\0\u05c3"+
    "\0\ud47e\0\ud4b9\0\ud4f4\0\ud52f\0\ud56a\0\ud5a5\0\u05c3\0\ud5e0"+
    "\0\ud61b\0\u05c3\0\ud656\0\ud691\0\ud6cc\0\ud707\0\ud742\0\u05c3"+
    "\0\ud77d\0\u05c3\0\u05c3\0\ud7b8\0\u05c3\0\ud7f3\0\ud82e\0\ud869"+
    "\0\u05c3\0\ud8a4\0\u05c3\0\u05c3\0\ud8df\0\ud91a\0\ud955\0\ud990"+
    "\0\u05c3\0\u05c3\0\ud9cb\0\uda06\0\uda41\0\uda7c\0\u05c3\0\udab7"+
    "\0\u05c3\0\udaf2\0\udb2d\0\udb68\0\udba3\0\udbde\0\udc19\0\udc54"+
    "\0\udc8f\0\udcca\0\u05c3\0\u05c3\0\u05c3\0\u05c3\0\udd05\0\udd40"+
    "\0\u05c3\0\udd7b\0\uddb6\0\uddf1\0\ude2c\0\u05c3\0\ude67\0\udea2"+
    "\0\udedd\0\u05c3\0\udf18\0\udf53\0\u05c3\0\udf8e\0\udfc9\0\u05c3"+
    "\0\ue004\0\ue03f\0\ue07a\0\u05c3\0\u05c3\0\ue0b5\0\u05c3\0\u05c3"+
    "\0\ue0f0\0\ue12b\0\ue166\0\u05c3\0\ue1a1\0\ue1dc\0\ue217\0\ue252"+
    "\0\ue28d\0\ue2c8\0\ue303\0\ue33e\0\ue379\0\ue3b4\0\u05c3\0\ue3ef"+
    "\0\ue42a\0\ue465\0\ue4a0\0\u05c3\0\ue4db\0\ue516\0\u05c3\0\ue551"+
    "\0\u05c3\0\ue58c\0\ue5c7\0\ue602\0\u05c3\0\ue63d\0\u05c3\0\ue678"+
    "\0\ue6b3\0\ue6ee\0\u05c3\0\u05c3\0\ue729\0\u05c3\0\ue764\0\u05c3"+
    "\0\u05c3\0\ue79f\0\ue7da\0\ue815\0\ue850\0\u05c3\0\u05c3\0\u05c3"+
    "\0\ue88b\0\u05c3\0\ue8c6\0\ue901\0\ue93c\0\ue977\0\u05c3\0\ue9b2"+
    "\0\ue9ed\0\u05c3\0\uea28\0\uea63\0\u05c3\0\uea9e\0\uead9\0\u05c3"+
    "\0\ueb14\0\ueb4f\0\ueb8a\0\uebc5\0\uec00\0\uec3b\0\uec76\0\uecb1"+
    "\0\uecec\0\ued27\0\ued62\0\ued9d\0\u05c3\0\uedd8\0\uee13\0\u05c3"+
    "\0\u05c3\0\uee4e\0\uee89\0\u05c3\0\ueec4\0\ueeff\0\uef3a\0\uef75"+
    "\0\u05c3\0\u05c3\0\uefb0\0\uefeb\0\uf026\0\uf061\0\u05c3\0\uf09c"+
    "\0\uf0d7\0\uf112\0\uf14d\0\uf188\0\uf1c3\0\u05c3\0\uf1fe\0\u05c3"+
    "\0\u05c3\0\u05c3\0\uf239\0\uf274\0\u05c3\0\uf2af\0\uf2ea\0\uf325"+
    "\0\uf360\0\uf39b\0\uf3d6\0\uf411\0\uf44c\0\uf487\0\u05c3\0\uf4c2"+
    "\0\u05c3\0\uf4fd\0\u05c3\0\uf538\0\uf573\0\u05c3\0\u05c3\0\uf5ae"+
    "\0\uf5e9\0\u05c3\0\uf624\0\uf65f\0\uf69a\0\uf6d5\0\uf710\0\u05c3"+
    "\0\u05c3\0\uf74b\0\uf786\0\uf7c1\0\uf7fc\0\uf837\0\uf872\0\u05c3"+
    "\0\uf8ad\0\u05c3\0\uf8e8\0\u05c3\0\u05c3\0\uf923\0\uf95e\0\uf999"+
    "\0\uf9d4\0\ufa0f\0\ufa4a\0\ufa85\0\u05c3\0\ufac0\0\ufafb\0\u05c3"+
    "\0\ufb36\0\ufb71\0\ufbac\0\ufbe7\0\ufc22\0\ufc5d\0\u05c3\0\ufc98"+
    "\0\ufcd3\0\ufd0e\0\ufd49\0\ufd84\0\u05c3\0\u05c3\0\ufdbf\0\u05c3"+
    "\0\ufdfa\0\ufe35\0\u05c3\0\u05c3\0\ufe70\0\ufeab\0\u05c3\0\u05c3"+
    "\0\ufee6\0\uff21\0\uff5c\0\u05c3\0\uff97\0\uffd2\1\15\1\110"+
    "\1\203\1\276\1\371\0\u05c3\1\u0134\1\u016f\0\u05c3\1\u01aa"+
    "\1\u01e5\0\u05c3\0\u05c3\0\u05c3\1\u0220\0\u05c3\1\u025b\1\u0296"+
    "\1\u02d1\1\u030c\1\u0347\1\u0382\0\u05c3\0\u05c3\0\u05c3\1\u03bd"+
    "\0\u05c3\1\u03f8\1\u0433\0\u05c3\0\u05c3\0\u05c3\0\u05c3\1\u046e"+
    "\1\u04a9\1\u04e4\1\u051f\1\u055a\0\u05c3\1\u0595\1\u05d0\1\u060b"+
    "\0\u05c3\0\u05c3\1\u0646\1\u0681\1\u06bc\0\u05c3\1\u06f7\1\u0732"+
    "\0\u05c3\1\u076d\0\u05c3\1\u07a8\1\u07e3\0\u05c3\1\u081e\0\u05c3"+
    "\0\u05c3\0\u05c3\1\u0859\0\u05c3\0\u05c3\1\u0894\1\u08cf\1\u090a"+
    "\0\u05c3\1\u0945\0\u05c3\0\u05c3\1\u0980\1\u09bb\1\u09f6\1\u0a31"+
    "\0\u05c3\1\u0a6c\1\u0aa7\0\u05c3\1\u0ae2\1\u0b1d\1\u0b58\1\u0b93"+
    "\1\u0bce\1\u0c09\1\u0c44\0\u05c3\1\u0c7f\1\u0cba\0\u05c3\1\u0cf5"+
    "\1\u0d30\1\u0d6b\1\u0da6\0\u05c3\1\u0de1\1\u0e1c\1\u0e57\0\u05c3"+
    "\1\u0e92\1\u0ecd\1\u0f08\0\u05c3\1\u0f43\1\u0f7e\1\u0fb9\1\u0ff4"+
    "\1\u102f\1\u106a\1\u10a5\1\u10e0\1\u111b\1\u1156\1\u1191\0\u05c3"+
    "\0\u05c3\1\u11cc\1\u1207\1\u1242\1\u127d\1\u12b8\1\u12f3\1\u132e"+
    "\0\u05c3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1497];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\30"+
    "\1\31\1\32\1\33\2\32\1\34\1\2\1\35\1\36"+
    "\1\32\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\41\75\0\1\32\1\66\1\67\1\32\1\70\1\71"+
    "\1\72\1\32\1\73\1\32\1\74\1\75\1\76\3\32"+
    "\1\77\16\32\1\0\1\32\32\0\1\100\2\32\1\101"+
    "\1\32\1\102\1\32\1\103\1\32\1\104\2\32\1\105"+
    "\1\106\21\32\1\0\1\32\32\0\1\107\2\32\1\110"+
    "\1\32\1\111\1\112\1\113\1\114\1\115\3\32\1\116"+
    "\1\117\4\32\1\120\2\32\1\121\3\32\1\122\4\32"+
    "\1\0\1\32\32\0\5\32\1\123\2\32\1\124\1\32"+
    "\1\125\1\32\1\126\3\32\1\127\2\32\1\130\3\32"+
    "\1\131\7\32\1\0\1\32\32\0\1\132\2\32\1\133"+
    "\3\32\1\134\1\32\1\135\25\32\1\0\1\32\32\0"+
    "\2\32\1\136\7\32\1\137\10\32\1\140\13\32\1\0"+
    "\1\32\32\0\1\141\1\32\1\142\1\143\3\32\1\144"+
    "\1\32\1\145\2\32\1\146\1\147\1\150\20\32\1\0"+
    "\1\32\32\0\2\32\1\151\1\32\1\152\5\32\1\153"+
    "\1\32\1\154\13\32\1\155\6\32\1\0\1\32\32\0"+
    "\1\156\2\32\1\157\1\160\1\161\6\32\1\162\1\32"+
    "\1\163\20\32\1\0\1\32\32\0\2\32\1\164\7\32"+
    "\1\165\1\166\12\32\1\167\1\170\7\32\1\0\1\32"+
    "\32\0\1\171\2\32\1\172\1\32\1\173\1\32\1\174"+
    "\1\175\26\32\1\0\1\32\32\0\1\176\1\177\1\32"+
    "\1\200\1\32\1\201\1\32\1\202\1\32\1\203\2\32"+
    "\1\204\1\205\21\32\1\0\1\32\32\0\1\206\2\32"+
    "\1\207\1\32\1\210\1\32\1\211\1\32\1\212\25\32"+
    "\1\0\1\32\32\0\7\32\1\213\27\32\1\0\1\32"+
    "\32\0\1\214\2\32\1\215\33\32\1\0\1\32\32\0"+
    "\3\32\1\216\33\32\1\0\1\32\32\0\1\217\10\32"+
    "\1\220\25\32\1\0\1\32\32\0\3\32\1\221\1\222"+
    "\2\32\1\223\4\32\1\224\22\32\1\0\1\32\32\0"+
    "\7\32\1\225\1\32\1\226\25\32\1\0\1\32\32\0"+
    "\1\227\2\32\1\230\1\231\1\232\1\32\1\233\1\32"+
    "\1\234\2\32\1\235\22\32\1\0\1\32\32\0\1\236"+
    "\2\32\1\237\5\32\1\240\2\32\1\241\1\32\1\242"+
    "\20\32\1\0\1\32\32\0\1\243\2\32\1\244\3\32"+
    "\1\245\1\32\1\246\25\32\1\0\1\32\32\0\1\247"+
    "\2\32\1\250\1\251\1\252\1\32\1\253\1\32\1\254"+
    "\2\32\1\255\22\32\1\0\1\32\32\0\37\32\1\0"+
    "\1\32\32\0\3\32\1\256\33\32\1\0\1\32\66\0"+
    "\1\34\1\0\1\34\1\257\74\0\1\260\30\0\43\261"+
    "\1\262\1\0\26\261\46\0\1\263\73\0\1\264\76\0"+
    "\1\265\1\266\71\0\1\267\72\0\1\270\72\0\1\271"+
    "\75\0\1\272\76\0\1\273\74\0\1\274\74\0\1\275"+
    "\74\0\1\276\3\0\2\32\1\277\34\32\1\0\1\32"+
    "\32\0\2\32\1\300\5\32\1\301\26\32\1\0\1\32"+
    "\32\0\4\32\1\302\1\32\1\303\30\32\1\0\1\32"+
    "\32\0\6\32\1\304\30\32\1\0\1\32\32\0\6\32"+
    "\1\305\30\32\1\0\1\32\32\0\13\32\1\306\1\32"+
    "\1\307\21\32\1\0\1\32\32\0\1\310\12\32\1\311"+
    "\23\32\1\0\1\32\32\0\7\32\1\312\27\32\1\0"+
    "\1\32\32\0\21\32\1\313\15\32\1\0\1\32\32\0"+
    "\10\32\1\314\26\32\1\0\1\32\32\0\6\32\1\315"+
    "\30\32\1\0\1\32\32\0\4\32\1\316\32\32\1\0"+
    "\1\32\32\0\6\32\1\317\12\32\1\320\15\32\1\0"+
    "\1\32\32\0\6\32\1\321\30\32\1\0\1\32\32\0"+
    "\3\32\1\322\3\32\1\323\27\32\1\0\1\32\32\0"+
    "\20\32\1\324\16\32\1\0\1\32\32\0\26\32\1\325"+
    "\10\32\1\0\1\32\32\0\1\32\1\326\24\32\1\327"+
    "\10\32\1\0\1\32\32\0\1\330\36\32\1\0\1\32"+
    "\32\0\2\32\1\331\1\32\1\332\1\32\1\333\1\32"+
    "\1\334\15\32\1\335\10\32\1\0\1\32\32\0\14\32"+
    "\1\336\1\32\1\337\20\32\1\0\1\32\32\0\17\32"+
    "\1\340\17\32\1\0\1\32\32\0\2\32\1\341\34\32"+
    "\1\0\1\32\32\0\5\32\1\342\31\32\1\0\1\32"+
    "\32\0\1\343\36\32\1\0\1\32\32\0\1\344\36\32"+
    "\1\0\1\32\32\0\4\32\1\345\32\32\1\0\1\32"+
    "\32\0\6\32\1\346\30\32\1\0\1\32\32\0\6\32"+
    "\1\347\30\32\1\0\1\32\32\0\4\32\1\350\32\32"+
    "\1\0\1\32\32\0\13\32\1\351\23\32\1\0\1\32"+
    "\32\0\7\32\1\352\27\32\1\0\1\32\32\0\6\32"+
    "\1\353\1\354\27\32\1\0\1\32\32\0\27\32\1\355"+
    "\7\32\1\0\1\32\32\0\2\32\1\356\7\32\1\357"+
    "\24\32\1\0\1\32\32\0\1\360\7\32\1\361\13\32"+
    "\1\362\12\32\1\0\1\32\32\0\1\363\17\32\1\364"+
    "\6\32\1\365\7\32\1\0\1\32\32\0\12\32\1\366"+
    "\7\32\1\367\14\32\1\0\1\32\32\0\1\370\6\32"+
    "\1\371\1\32\1\372\25\32\1\0\1\32\32\0\11\32"+
    "\1\373\10\32\1\374\1\375\13\32\1\0\1\32\32\0"+
    "\13\32\1\376\7\32\1\377\13\32\1\0\1\32\32\0"+
    "\1\32\1\u0100\35\32\1\0\1\32\32\0\7\32\1\u0101"+
    "\27\32\1\0\1\32\32\0\23\32\1\u0102\13\32\1\0"+
    "\1\32\32\0\26\32\1\u0103\1\32\1\u0104\6\32\1\0"+
    "\1\32\32\0\26\32\1\u0105\10\32\1\0\1\32\32\0"+
    "\1\u0106\4\32\1\u0107\3\32\1\u0108\3\32\1\u0109\21\32"+
    "\1\0\1\32\32\0\23\32\1\u010a\13\32\1\0\1\32"+
    "\32\0\7\32\1\u010b\27\32\1\0\1\32\32\0\10\32"+
    "\1\u010c\26\32\1\0\1\32\32\0\2\32\1\u010d\34\32"+
    "\1\0\1\32\32\0\10\32\1\u010e\2\32\1\u010f\23\32"+
    "\1\0\1\32\32\0\14\32\1\u0110\22\32\1\0\1\32"+
    "\32\0\6\32\1\u0111\1\u0112\1\u0113\1\u0114\25\32\1\0"+
    "\1\32\32\0\2\32\1\u0115\3\32\1\u0116\30\32\1\0"+
    "\1\32\32\0\1\u0117\3\32\1\u0118\1\u0119\4\32\1\u011a"+
    "\1\32\1\u011b\11\32\1\u011c\10\32\1\0\1\32\32\0"+
    "\3\32\1\u011d\1\32\1\u011e\31\32\1\0\1\32\32\0"+
    "\14\32\1\u011f\22\32\1\0\1\32\32\0\3\32\1\u0120"+
    "\3\32\1\u0121\27\32\1\0\1\32\32\0\1\u0122\6\32"+
    "\1\u0123\27\32\1\0\1\32\32\0\3\32\1\u0124\33\32"+
    "\1\0\1\32\32\0\2\32\1\u0125\3\32\1\u0126\1\32"+
    "\1\u0127\1\u0128\1\u0129\1\u012a\7\32\1\u012b\13\32\1\0"+
    "\1\32\32\0\7\32\1\u012c\27\32\1\0\1\32\32\0"+
    "\26\32\1\u012d\10\32\1\0\1\32\32\0\6\32\1\u012e"+
    "\17\32\1\u012f\10\32\1\0\1\32\32\0\6\32\1\u0130"+
    "\1\32\1\u0131\1\32\1\u0132\24\32\1\0\1\32\32\0"+
    "\4\32\1\u0133\21\32\1\u0134\10\32\1\0\1\32\32\0"+
    "\30\32\1\u0135\6\32\1\0\1\32\32\0\16\32\1\u0136"+
    "\20\32\1\0\1\32\32\0\6\32\1\u0137\6\32\1\u0138"+
    "\21\32\1\0\1\32\32\0\10\32\1\u0139\26\32\1\0"+
    "\1\32\32\0\5\32\1\u013a\20\32\1\u013b\10\32\1\0"+
    "\1\32\32\0\26\32\1\u013c\10\32\1\0\1\32\32\0"+
    "\1\u013d\1\32\1\u013e\1\32\1\u013f\3\32\1\u0140\1\32"+
    "\1\u0141\14\32\1\u0142\7\32\1\0\1\32\32\0\1\u0143"+
    "\1\32\1\u0144\34\32\1\0\1\32\32\0\3\32\1\u0145"+
    "\33\32\1\0\1\32\32\0\12\32\1\u0146\24\32\1\0"+
    "\1\32\32\0\11\32\1\u0147\25\32\1\0\1\32\32\0"+
    "\4\32\1\u0148\17\32\1\u0149\12\32\1\0\1\32\32\0"+
    "\4\32\1\u014a\32\32\1\0\1\32\32\0\1\u014b\1\32"+
    "\1\u014c\1\32\1\u014d\1\32\1\u014e\1\32\1\u014f\7\32"+
    "\1\u0150\2\32\1\u0151\3\32\1\u0152\7\32\1\0\1\32"+
    "\32\0\21\32\1\u0153\15\32\1\0\1\32\32\0\1\u0154"+
    "\36\32\1\0\1\32\32\0\20\32\1\u0155\16\32\1\0"+
    "\1\32\32\0\4\32\1\u0156\1\u0157\31\32\1\0\1\32"+
    "\32\0\12\32\1\u0158\24\32\1\0\1\32\32\0\4\32"+
    "\1\u0159\7\32\1\u015a\22\32\1\0\1\32\32\0\7\32"+
    "\1\u015b\27\32\1\0\1\32\32\0\6\32\1\u015c\30\32"+
    "\1\0\1\32\32\0\3\32\1\u015d\33\32\1\0\1\32"+
    "\32\0\6\32\1\u015e\30\32\1\0\1\32\32\0\1\u015f"+
    "\2\32\1\u0160\33\32\1\0\1\32\32\0\15\32\1\u0161"+
    "\21\32\1\0\1\32\32\0\4\32\1\u0162\32\32\1\0"+
    "\1\32\32\0\2\32\1\u0163\10\32\1\u0164\1\u0165\22\32"+
    "\1\0\1\32\32\0\2\32\1\u0166\34\32\1\0\1\32"+
    "\32\0\1\u0167\36\32\1\0\1\32\32\0\1\32\1\u0168"+
    "\35\32\1\0\1\32\32\0\14\32\1\u0169\22\32\1\0"+
    "\1\32\32\0\20\32\1\u016a\16\32\1\0\1\32\32\0"+
    "\3\32\1\u016b\3\32\1\u016c\1\32\1\u016d\25\32\1\0"+
    "\1\32\32\0\11\32\1\u016e\25\32\1\0\1\32\32\0"+
    "\14\32\1\u016f\22\32\1\0\1\32\32\0\6\32\1\u0170"+
    "\30\32\1\0\1\32\32\0\11\32\1\u0171\25\32\1\0"+
    "\1\32\32\0\7\32\1\u0172\1\32\1\u0173\25\32\1\0"+
    "\1\32\32\0\6\32\1\u0174\21\32\1\u0175\6\32\1\0"+
    "\1\32\32\0\12\32\1\u0176\1\u0177\23\32\1\0\1\32"+
    "\32\0\14\32\1\u0178\22\32\1\0\1\32\32\0\12\32"+
    "\1\u0179\24\32\1\0\1\32\32\0\2\32\1\u017a\1\32"+
    "\1\u017b\32\32\1\0\1\32\32\0\5\32\1\u017c\6\32"+
    "\1\u017d\22\32\1\0\1\32\32\0\3\32\1\u017e\33\32"+
    "\1\0\1\32\32\0\4\32\1\u017f\5\32\1\u0180\24\32"+
    "\1\0\1\32\32\0\6\32\1\u0181\30\32\1\0\1\32"+
    "\32\0\4\32\1\u0182\7\32\1\u0183\22\32\1\0\1\32"+
    "\32\0\3\32\1\u0184\3\32\1\u0185\27\32\1\0\1\32"+
    "\32\0\11\32\1\u0186\25\32\1\0\1\32\41\0\1\u0187"+
    "\24\0\1\257\1\0\1\257\1\0\1\u0187\31\0\44\u0188"+
    "\1\u0189\26\u0188\73\u018a\1\0\3\32\1\u018b\33\32\1\0"+
    "\1\32\32\0\7\32\1\u018c\27\32\1\0\1\32\32\0"+
    "\3\32\1\u018d\33\32\1\0\1\32\32\0\7\32\1\u018e"+
    "\27\32\1\0\1\32\32\0\16\32\1\u018f\20\32\1\0"+
    "\1\32\32\0\11\32\1\u0190\25\32\1\0\1\32\32\0"+
    "\22\32\1\u0191\14\32\1\0\1\32\32\0\16\32\1\u0192"+
    "\20\32\1\0\1\32\32\0\22\32\1\u0193\14\32\1\0"+
    "\1\32\32\0\24\32\1\u0194\12\32\1\0\1\32\32\0"+
    "\11\32\1\u0195\25\32\1\0\1\32\32\0\25\32\1\u0196"+
    "\11\32\1\0\1\32\32\0\24\32\1\u0197\12\32\1\0"+
    "\1\32\32\0\1\u0198\36\32\1\0\1\32\32\0\7\32"+
    "\1\u0199\27\32\1\0\1\32\32\0\7\32\1\u019a\27\32"+
    "\1\0\1\32\32\0\2\32\1\u019b\34\32\1\0\1\32"+
    "\32\0\6\32\1\u019c\30\32\1\0\1\32\32\0\2\32"+
    "\1\u019d\34\32\1\0\1\32\32\0\7\32\1\u019e\27\32"+
    "\1\0\1\32\32\0\5\32\1\u019f\31\32\1\0\1\32"+
    "\32\0\3\32\1\u01a0\1\32\1\u01a1\1\u01a2\30\32\1\0"+
    "\1\32\32\0\1\u01a3\36\32\1\0\1\32\32\0\3\32"+
    "\1\u01a4\33\32\1\0\1\32\32\0\7\32\1\u01a5\27\32"+
    "\1\0\1\32\32\0\7\32\1\u01a6\27\32\1\0\1\32"+
    "\32\0\6\32\1\u01a7\30\32\1\0\1\32\32\0\6\32"+
    "\1\u01a8\30\32\1\0\1\32\32\0\10\32\1\u01a9\26\32"+
    "\1\0\1\32\32\0\4\32\1\u01aa\32\32\1\0\1\32"+
    "\32\0\2\32\1\u01ab\4\32\1\u01ac\1\u01ad\13\32\1\u01ae"+
    "\12\32\1\0\1\32\32\0\7\32\1\u01af\13\32\1\u01b0"+
    "\13\32\1\0\1\32\32\0\7\32\1\u01b1\27\32\1\0"+
    "\1\32\32\0\15\32\1\u01b2\21\32\1\0\1\32\32\0"+
    "\7\32\1\u01b3\27\32\1\0\1\32\32\0\14\32\1\u01b4"+
    "\22\32\1\0\1\32\32\0\11\32\1\u01b5\25\32\1\0"+
    "\1\32\32\0\12\32\1\u01b6\24\32\1\0\1\32\32\0"+
    "\2\32\1\u01b7\34\32\1\0\1\32\32\0\6\32\1\u01b8"+
    "\30\32\1\0\1\32\32\0\21\32\1\u01b9\15\32\1\0"+
    "\1\32\32\0\13\32\1\u01ba\23\32\1\0\1\32\32\0"+
    "\1\u01bb\36\32\1\0\1\32\32\0\7\32\1\u01bc\27\32"+
    "\1\0\1\32\32\0\13\32\1\u01bd\23\32\1\0\1\32"+
    "\32\0\7\32\1\u01be\27\32\1\0\1\32\32\0\6\32"+
    "\1\u01bf\30\32\1\0\1\32\32\0\7\32\1\u01c0\27\32"+
    "\1\0\1\32\32\0\7\32\1\u01c1\27\32\1\0\1\32"+
    "\32\0\21\32\1\u01c2\15\32\1\0\1\32\32\0\14\32"+
    "\1\u01c3\22\32\1\0\1\32\32\0\12\32\1\u01c4\24\32"+
    "\1\0\1\32\32\0\3\32\1\u01c5\26\32\1\u01c6\4\32"+
    "\1\0\1\32\32\0\12\32\1\u01c7\24\32\1\0\1\32"+
    "\32\0\11\32\1\u01c8\25\32\1\0\1\32\32\0\1\u01c9"+
    "\36\32\1\0\1\32\32\0\7\32\1\u01ca\27\32\1\0"+
    "\1\32\32\0\4\32\1\u01cb\32\32\1\0\1\32\32\0"+
    "\32\32\1\u01cc\4\32\1\0\1\32\32\0\23\32\1\u01cd"+
    "\13\32\1\0\1\32\32\0\6\32\1\u01ce\30\32\1\0"+
    "\1\32\32\0\7\32\1\u01cf\27\32\1\0\1\32\32\0"+
    "\11\32\1\u01d0\1\u01d1\24\32\1\0\1\32\32\0\7\32"+
    "\1\u01d2\2\32\1\u01d3\24\32\1\0\1\32\32\0\21\32"+
    "\1\u01d4\4\32\1\u01d5\10\32\1\0\1\32\32\0\25\32"+
    "\1\u01d6\11\32\1\0\1\32\32\0\7\32\1\u01d7\27\32"+
    "\1\0\1\32\32\0\12\32\1\u01d8\24\32\1\0\1\32"+
    "\32\0\1\u01d9\36\32\1\0\1\32\32\0\7\32\1\u01da"+
    "\27\32\1\0\1\32\32\0\14\32\1\u01db\22\32\1\0"+
    "\1\32\32\0\25\32\1\u01dc\11\32\1\0\1\32\32\0"+
    "\4\32\1\u01dd\32\32\1\0\1\32\32\0\7\32\1\u01de"+
    "\4\32\1\u01df\22\32\1\0\1\32\32\0\10\32\1\u01e0"+
    "\26\32\1\0\1\32\32\0\7\32\1\u01e1\27\32\1\0"+
    "\1\32\32\0\2\32\1\u01e2\3\32\1\u01e3\30\32\1\0"+
    "\1\32\32\0\6\32\1\u01e4\1\u01e5\1\u01e6\26\32\1\0"+
    "\1\32\32\0\1\u01e7\36\32\1\0\1\32\32\0\4\32"+
    "\1\u01e8\32\32\1\0\1\32\32\0\4\32\1\u01e9\1\u01ea"+
    "\31\32\1\0\1\32\32\0\12\32\1\u01eb\24\32\1\0"+
    "\1\32\32\0\2\32\1\u01ec\3\32\1\u01ed\3\32\1\u01ee"+
    "\5\32\1\u01ef\16\32\1\0\1\32\32\0\14\32\1\u01f0"+
    "\22\32\1\0\1\32\32\0\23\32\1\u01f1\2\32\1\u01f2"+
    "\10\32\1\0\1\32\32\0\2\32\1\u01f3\34\32\1\0"+
    "\1\32\32\0\2\32\1\u01f4\34\32\1\0\1\32\32\0"+
    "\2\32\1\u01f5\11\32\1\u01f6\22\32\1\0\1\32\32\0"+
    "\2\32\1\u01f7\34\32\1\0\1\32\32\0\1\u01f8\36\32"+
    "\1\0\1\32\32\0\14\32\1\u01f9\22\32\1\0\1\32"+
    "\32\0\10\32\1\u01fa\26\32\1\0\1\32\32\0\4\32"+
    "\1\u01fb\32\32\1\0\1\32\32\0\7\32\1\u01fc\27\32"+
    "\1\0\1\32\32\0\3\32\1\u01fd\3\32\1\u01fe\27\32"+
    "\1\0\1\32\32\0\4\32\1\u01ff\32\32\1\0\1\32"+
    "\32\0\6\32\1\u0200\30\32\1\0\1\32\32\0\7\32"+
    "\1\u0201\27\32\1\0\1\32\32\0\7\32\1\u0202\1\32"+
    "\1\u0203\25\32\1\0\1\32\32\0\5\32\1\u0204\31\32"+
    "\1\0\1\32\32\0\12\32\1\u0205\24\32\1\0\1\32"+
    "\32\0\7\32\1\u0206\27\32\1\0\1\32\32\0\5\32"+
    "\1\u0207\3\32\1\u0208\25\32\1\0\1\32\32\0\7\32"+
    "\1\u0209\27\32\1\0\1\32\32\0\4\32\1\u020a\11\32"+
    "\1\u020b\20\32\1\0\1\32\32\0\7\32\1\u020c\1\u020d"+
    "\26\32\1\0\1\32\32\0\4\32\1\u020e\32\32\1\0"+
    "\1\32\32\0\7\32\1\u020f\27\32\1\0\1\32\32\0"+
    "\6\32\1\u0210\30\32\1\0\1\32\32\0\1\u0211\36\32"+
    "\1\0\1\32\32\0\1\u0212\6\32\1\u0213\27\32\1\0"+
    "\1\32\32\0\10\32\1\u0214\26\32\1\0\1\32\32\0"+
    "\1\32\1\u0215\35\32\1\0\1\32\32\0\1\u0216\36\32"+
    "\1\0\1\32\32\0\23\32\1\u0217\13\32\1\0\1\32"+
    "\32\0\4\32\1\u0218\32\32\1\0\1\32\32\0\10\32"+
    "\1\u0219\26\32\1\0\1\32\32\0\1\u021a\6\32\1\u021b"+
    "\27\32\1\0\1\32\32\0\4\32\1\u021c\4\32\1\u021d"+
    "\25\32\1\0\1\32\32\0\15\32\1\u021e\21\32\1\0"+
    "\1\32\32\0\1\u021f\6\32\1\u0220\27\32\1\0\1\32"+
    "\32\0\21\32\1\u0221\15\32\1\0\1\32\32\0\6\32"+
    "\1\u0222\1\32\1\u0223\11\32\1\u0224\14\32\1\0\1\32"+
    "\32\0\23\32\1\u0225\13\32\1\0\1\32\32\0\1\u0226"+
    "\36\32\1\0\1\32\32\0\2\32\1\u0227\34\32\1\0"+
    "\1\32\32\0\4\32\1\u0228\32\32\1\0\1\32\32\0"+
    "\2\32\1\u0229\5\32\1\u022a\10\32\1\u022b\15\32\1\0"+
    "\1\32\32\0\7\32\1\u022c\27\32\1\0\1\32\32\0"+
    "\4\32\1\u022d\6\32\1\u022e\23\32\1\0\1\32\32\0"+
    "\6\32\1\u022f\30\32\1\0\1\32\32\0\1\u0230\36\32"+
    "\1\0\1\32\32\0\5\32\1\u0231\31\32\1\0\1\32"+
    "\32\0\3\32\1\u0232\33\32\1\0\1\32\32\0\3\32"+
    "\1\u0233\3\32\1\u0234\27\32\1\0\1\32\32\0\4\32"+
    "\1\u0235\32\32\1\0\1\32\32\0\7\32\1\u0236\27\32"+
    "\1\0\1\32\32\0\16\32\1\u0237\20\32\1\0\1\32"+
    "\32\0\14\32\1\u0238\22\32\1\0\1\32\32\0\11\32"+
    "\1\u0239\25\32\1\0\1\32\32\0\13\32\1\u023a\23\32"+
    "\1\0\1\32\32\0\14\32\1\u023b\22\32\1\0\1\32"+
    "\32\0\7\32\1\u023c\27\32\1\0\1\32\32\0\5\32"+
    "\1\u023d\31\32\1\0\1\32\32\0\10\32\1\u023e\1\u023f"+
    "\3\32\1\u0240\21\32\1\0\1\32\32\0\24\32\1\u0241"+
    "\12\32\1\0\1\32\32\0\3\32\1\u0242\33\32\1\0"+
    "\1\32\32\0\1\32\1\u0243\35\32\1\0\1\32\32\0"+
    "\12\32\1\u0244\24\32\1\0\1\32\32\0\5\32\1\u0245"+
    "\31\32\1\0\1\32\32\0\2\32\1\u0246\34\32\1\0"+
    "\1\32\32\0\4\32\1\u0247\32\32\1\0\1\32\32\0"+
    "\10\32\1\u0248\26\32\1\0\1\32\32\0\6\32\1\u0249"+
    "\30\32\1\0\1\32\32\0\11\32\1\u024a\25\32\1\0"+
    "\1\32\32\0\12\32\1\u024b\24\32\1\0\1\32\32\0"+
    "\4\32\1\u024c\32\32\1\0\1\32\32\0\10\32\1\u024d"+
    "\26\32\1\0\1\32\32\0\3\32\1\u024e\33\32\1\0"+
    "\1\32\32\0\10\32\1\u024f\26\32\1\0\1\32\32\0"+
    "\2\32\1\u0250\5\32\1\u0251\12\32\1\u0252\13\32\1\0"+
    "\1\32\32\0\3\32\1\u0253\6\32\1\u0254\5\32\1\u0255"+
    "\5\32\1\u0256\10\32\1\0\1\32\32\0\6\32\1\u0257"+
    "\30\32\1\0\1\32\32\0\22\32\1\u0258\14\32\1\0"+
    "\1\32\32\0\16\32\1\u0259\20\32\1\0\1\32\32\0"+
    "\6\32\1\u025a\30\32\1\0\1\32\32\0\12\32\1\u025b"+
    "\1\32\1\u025c\22\32\1\0\1\32\32\0\4\32\1\u025d"+
    "\32\32\1\0\1\32\32\0\10\32\1\u025e\26\32\1\0"+
    "\1\32\32\0\6\32\1\u025f\30\32\1\0\1\32\32\0"+
    "\5\32\1\u0260\31\32\1\0\1\32\32\0\21\32\1\u0261"+
    "\15\32\1\0\1\32\32\0\5\32\1\u0262\31\32\1\0"+
    "\1\32\32\0\6\32\1\u0263\30\32\1\0\1\32\32\0"+
    "\2\32\1\u0264\34\32\1\0\1\32\32\0\12\32\1\u0265"+
    "\24\32\1\0\1\32\32\0\6\32\1\u0266\1\u0267\14\32"+
    "\1\u0268\12\32\1\0\1\32\32\0\1\u0269\36\32\1\0"+
    "\1\32\32\0\4\32\1\u026a\32\32\1\0\1\32\32\0"+
    "\10\32\1\u026b\26\32\1\0\1\32\32\0\10\32\1\u026c"+
    "\26\32\1\0\1\32\32\0\4\32\1\u026d\2\32\1\u026e"+
    "\27\32\1\0\1\32\32\0\2\32\1\u026f\34\32\1\0"+
    "\1\32\32\0\26\32\1\u0270\10\32\1\0\1\32\32\0"+
    "\7\32\1\u0271\27\32\1\0\1\32\32\0\12\32\1\u0272"+
    "\24\32\1\0\1\32\66\0\1\u0273\1\0\1\u0273\2\0"+
    "\1\u0274\4\0\2\u0274\22\0\46\u0189\1\u0275\24\u0189\44\u018a"+
    "\1\41\26\u018a\1\0\4\32\1\u0276\32\32\1\0\1\32"+
    "\32\0\14\32\1\u0277\22\32\1\0\1\32\32\0\10\32"+
    "\1\u0278\26\32\1\0\1\32\32\0\14\32\1\u0279\22\32"+
    "\1\0\1\32\32\0\3\32\1\u027a\33\32\1\0\1\32"+
    "\32\0\3\32\1\u027b\33\32\1\0\1\32\32\0\5\32"+
    "\1\u027c\31\32\1\0\1\32\32\0\7\32\1\u027d\27\32"+
    "\1\0\1\32\32\0\12\32\1\u027e\24\32\1\0\1\32"+
    "\32\0\4\32\1\u027f\32\32\1\0\1\32\32\0\2\32"+
    "\1\u0280\34\32\1\0\1\32\32\0\22\32\1\u0281\14\32"+
    "\1\0\1\32\32\0\6\32\1\u0282\30\32\1\0\1\32"+
    "\32\0\11\32\1\u0283\25\32\1\0\1\32\32\0\11\32"+
    "\1\u0284\25\32\1\0\1\32\32\0\10\32\1\u0285\26\32"+
    "\1\0\1\32\32\0\2\32\1\u0286\34\32\1\0\1\32"+
    "\32\0\12\32\1\u0287\24\32\1\0\1\32\32\0\14\32"+
    "\1\u0288\22\32\1\0\1\32\32\0\11\32\1\u0289\25\32"+
    "\1\0\1\32\32\0\12\32\1\u028a\24\32\1\0\1\32"+
    "\32\0\4\32\1\u028b\32\32\1\0\1\32\32\0\26\32"+
    "\1\u028c\10\32\1\0\1\32\32\0\7\32\1\u028d\27\32"+
    "\1\0\1\32\32\0\13\32\1\u028e\23\32\1\0\1\32"+
    "\32\0\7\32\1\u028f\27\32\1\0\1\32\32\0\4\32"+
    "\1\u0290\32\32\1\0\1\32\32\0\6\32\1\u0291\30\32"+
    "\1\0\1\32\32\0\14\32\1\u0292\22\32\1\0\1\32"+
    "\32\0\1\u0293\2\32\1\u0294\33\32\1\0\1\32\32\0"+
    "\1\u0295\36\32\1\0\1\32\32\0\14\32\1\u0296\22\32"+
    "\1\0\1\32\32\0\5\32\1\u0297\31\32\1\0\1\32"+
    "\32\0\6\32\1\u0298\30\32\1\0\1\32\32\0\14\32"+
    "\1\u0299\22\32\1\0\1\32\32\0\4\32\1\u029a\32\32"+
    "\1\0\1\32\32\0\3\32\1\u029b\22\32\1\u029c\10\32"+
    "\1\0\1\32\32\0\13\32\1\u029d\1\u029e\13\32\1\u029f"+
    "\1\32\1\u02a0\4\32\1\0\1\32\32\0\7\32\1\u02a1"+
    "\27\32\1\0\1\32\32\0\5\32\1\u02a2\31\32\1\0"+
    "\1\32\32\0\4\32\1\u02a3\32\32\1\0\1\32\32\0"+
    "\14\32\1\u02a4\22\32\1\0\1\32\32\0\11\32\1\u02a5"+
    "\25\32\1\0\1\32\32\0\4\32\1\u02a6\32\32\1\0"+
    "\1\32\32\0\12\32\1\u02a7\24\32\1\0\1\32\32\0"+
    "\7\32\1\u02a8\27\32\1\0\1\32\32\0\21\32\1\u02a9"+
    "\15\32\1\0\1\32\32\0\12\32\1\u02aa\24\32\1\0"+
    "\1\32\32\0\5\32\1\u02ab\31\32\1\0\1\32\32\0"+
    "\3\32\1\u02ac\33\32\1\0\1\32\32\0\20\32\1\u02ad"+
    "\16\32\1\0\1\32\32\0\6\32\1\u02ae\30\32\1\0"+
    "\1\32\32\0\14\32\1\u02af\22\32\1\0\1\32\32\0"+
    "\7\32\1\u02b0\27\32\1\0\1\32\32\0\5\32\1\u02b1"+
    "\31\32\1\0\1\32\32\0\3\32\1\u02b2\33\32\1\0"+
    "\1\32\32\0\2\32\1\u02b3\34\32\1\0\1\32\32\0"+
    "\2\32\1\u02b4\14\32\1\u02b5\17\32\1\0\1\32\32\0"+
    "\4\32\1\u02b6\32\32\1\0\1\32\32\0\2\32\1\u02b7"+
    "\34\32\1\0\1\32\32\0\10\32\1\u02b8\26\32\1\0"+
    "\1\32\32\0\21\32\1\u02b9\15\32\1\0\1\32\32\0"+
    "\10\32\1\u02ba\26\32\1\0\1\32\32\0\25\32\1\u02bb"+
    "\11\32\1\0\1\32\32\0\23\32\1\u02bc\13\32\1\0"+
    "\1\32\32\0\15\32\1\u02bd\21\32\1\0\1\32\32\0"+
    "\7\32\1\u02be\27\32\1\0\1\32\32\0\20\32\1\u02bf"+
    "\16\32\1\0\1\32\32\0\14\32\1\u02c0\22\32\1\0"+
    "\1\32\32\0\1\u02c1\36\32\1\0\1\32\32\0\5\32"+
    "\1\u02c2\31\32\1\0\1\32\32\0\23\32\1\u02c3\13\32"+
    "\1\0\1\32\32\0\6\32\1\u02c4\30\32\1\0\1\32"+
    "\32\0\1\u02c5\36\32\1\0\1\32\32\0\4\32\1\u02c6"+
    "\32\32\1\0\1\32\32\0\7\32\1\u02c7\27\32\1\0"+
    "\1\32\32\0\1\u02c8\36\32\1\0\1\32\32\0\26\32"+
    "\1\u02c9\10\32\1\0\1\32\32\0\6\32\1\u02ca\30\32"+
    "\1\0\1\32\32\0\6\32\1\u02cb\30\32\1\0\1\32"+
    "\32\0\1\u02cc\10\32\1\u02cd\25\32\1\0\1\32\32\0"+
    "\7\32\1\u02ce\27\32\1\0\1\32\32\0\7\32\1\u02cf"+
    "\27\32\1\0\1\32\32\0\7\32\1\u02d0\27\32\1\0"+
    "\1\32\32\0\5\32\1\u02d1\31\32\1\0\1\32\32\0"+
    "\11\32\1\u02d2\25\32\1\0\1\32\32\0\7\32\1\u02d3"+
    "\27\32\1\0\1\32\32\0\6\32\1\u02d4\30\32\1\0"+
    "\1\32\32\0\3\32\1\u02d5\33\32\1\0\1\32\32\0"+
    "\7\32\1\u02d6\27\32\1\0\1\32\32\0\2\32\1\u02d7"+
    "\34\32\1\0\1\32\32\0\6\32\1\u02d8\30\32\1\0"+
    "\1\32\32\0\1\u02d9\24\32\1\u02da\11\32\1\0\1\32"+
    "\32\0\22\32\1\u02db\14\32\1\0\1\32\32\0\1\u02dc"+
    "\36\32\1\0\1\32\32\0\12\32\1\u02dd\1\32\1\u02de"+
    "\22\32\1\0\1\32\32\0\14\32\1\u02df\4\32\1\u02e0"+
    "\15\32\1\0\1\32\32\0\5\32\1\u02e1\31\32\1\0"+
    "\1\32\32\0\11\32\1\u02e2\25\32\1\0\1\32\32\0"+
    "\14\32\1\u02e3\22\32\1\0\1\32\32\0\30\32\1\u02e4"+
    "\6\32\1\0\1\32\32\0\10\32\1\u02e5\26\32\1\0"+
    "\1\32\32\0\6\32\1\u02e6\30\32\1\0\1\32\32\0"+
    "\6\32\1\u02e7\30\32\1\0\1\32\32\0\13\32\1\u02e8"+
    "\23\32\1\0\1\32\32\0\14\32\1\u02e9\22\32\1\0"+
    "\1\32\32\0\3\32\1\u02ea\33\32\1\0\1\32\32\0"+
    "\2\32\1\u02eb\34\32\1\0\1\32\32\0\5\32\1\u02ec"+
    "\31\32\1\0\1\32\32\0\7\32\1\u02ed\27\32\1\0"+
    "\1\32\32\0\4\32\1\u02ee\32\32\1\0\1\32\32\0"+
    "\11\32\1\u02ef\25\32\1\0\1\32\32\0\14\32\1\u02f0"+
    "\22\32\1\0\1\32\32\0\14\32\1\u02f1\22\32\1\0"+
    "\1\32\32\0\1\32\1\u02f2\35\32\1\0\1\32\32\0"+
    "\4\32\1\u02f3\32\32\1\0\1\32\32\0\11\32\1\u02f4"+
    "\25\32\1\0\1\32\32\0\4\32\1\u02f5\32\32\1\0"+
    "\1\32\32\0\14\32\1\u02f6\22\32\1\0\1\32\32\0"+
    "\15\32\1\u02f7\21\32\1\0\1\32\32\0\6\32\1\u02f8"+
    "\30\32\1\0\1\32\32\0\1\u02f9\36\32\1\0\1\32"+
    "\32\0\26\32\1\u02fa\10\32\1\0\1\32\32\0\5\32"+
    "\1\u02fb\31\32\1\0\1\32\32\0\14\32\1\u02fc\22\32"+
    "\1\0\1\32\32\0\12\32\1\u02fd\24\32\1\0\1\32"+
    "\32\0\11\32\1\u02fe\2\32\1\u02ff\22\32\1\0\1\32"+
    "\32\0\3\32\1\u0300\33\32\1\0\1\32\32\0\26\32"+
    "\1\u0301\10\32\1\0\1\32\32\0\7\32\1\u0302\27\32"+
    "\1\0\1\32\32\0\1\32\1\u0303\35\32\1\0\1\32"+
    "\32\0\3\32\1\u0304\33\32\1\0\1\32\32\0\5\32"+
    "\1\u0305\31\32\1\0\1\32\32\0\6\32\1\u0306\16\32"+
    "\1\u0307\11\32\1\0\1\32\32\0\3\32\1\u0308\10\32"+
    "\1\u0309\22\32\1\0\1\32\32\0\6\32\1\u030a\30\32"+
    "\1\0\1\32\32\0\14\32\1\u030b\22\32\1\0\1\32"+
    "\32\0\12\32\1\u030c\13\32\1\u030d\10\32\1\0\1\32"+
    "\32\0\22\32\1\u030e\14\32\1\0\1\32\32\0\14\32"+
    "\1\u030f\22\32\1\0\1\32\32\0\11\32\1\u0310\25\32"+
    "\1\0\1\32\32\0\14\32\1\u0311\22\32\1\0\1\32"+
    "\32\0\6\32\1\u0312\30\32\1\0\1\32\32\0\12\32"+
    "\1\u0313\24\32\1\0\1\32\32\0\4\32\1\u0314\32\32"+
    "\1\0\1\32\32\0\7\32\1\u0315\27\32\1\0\1\32"+
    "\32\0\16\32\1\u0316\20\32\1\0\1\32\32\0\15\32"+
    "\1\u0317\21\32\1\0\1\32\32\0\11\32\1\u0318\25\32"+
    "\1\0\1\32\32\0\1\u0319\36\32\1\0\1\32\32\0"+
    "\6\32\1\u031a\30\32\1\0\1\32\32\0\23\32\1\u031b"+
    "\13\32\1\0\1\32\32\0\7\32\1\u031c\27\32\1\0"+
    "\1\32\32\0\1\u031d\36\32\1\0\1\32\32\0\11\32"+
    "\1\u031e\25\32\1\0\1\32\32\0\6\32\1\u031f\30\32"+
    "\1\0\1\32\32\0\11\32\1\u0320\25\32\1\0\1\32"+
    "\32\0\7\32\1\u0321\27\32\1\0\1\32\32\0\6\32"+
    "\1\u0322\30\32\1\0\1\32\32\0\7\32\1\u0323\27\32"+
    "\1\0\1\32\32\0\7\32\1\u0324\27\32\1\0\1\32"+
    "\32\0\11\32\1\u0325\25\32\1\0\1\32\32\0\1\u0326"+
    "\36\32\1\0\1\32\32\0\14\32\1\u0327\22\32\1\0"+
    "\1\32\32\0\6\32\1\u0328\30\32\1\0\1\32\32\0"+
    "\11\32\1\u0329\25\32\1\0\1\32\32\0\1\u032a\36\32"+
    "\1\0\1\32\32\0\27\32\1\u032b\7\32\1\0\1\32"+
    "\32\0\11\32\1\u032c\25\32\1\0\1\32\32\0\7\32"+
    "\1\u032d\27\32\1\0\1\32\32\0\7\32\1\u032e\27\32"+
    "\1\0\1\32\32\0\7\32\1\u032f\27\32\1\0\1\32"+
    "\32\0\7\32\1\u0330\27\32\1\0\1\32\32\0\16\32"+
    "\1\u0331\20\32\1\0\1\32\32\0\16\32\1\u0332\20\32"+
    "\1\0\1\32\32\0\4\32\1\u0333\32\32\1\0\1\32"+
    "\32\0\7\32\1\u0334\27\32\1\0\1\32\32\0\6\32"+
    "\1\u0335\30\32\1\0\1\32\32\0\25\32\1\u0336\11\32"+
    "\1\0\1\32\32\0\7\32\1\u0337\27\32\1\0\1\32"+
    "\32\0\13\32\1\u0338\23\32\1\0\1\32\32\0\14\32"+
    "\1\u0339\22\32\1\0\1\32\32\0\11\32\1\u033a\25\32"+
    "\1\0\1\32\32\0\1\u033b\36\32\1\0\1\32\32\0"+
    "\6\32\1\u033c\30\32\1\0\1\32\32\0\6\32\1\u033d"+
    "\30\32\1\0\1\32\32\0\16\32\1\u033e\20\32\1\0"+
    "\1\32\32\0\27\32\1\u033f\7\32\1\0\1\32\32\0"+
    "\6\32\1\u0340\30\32\1\0\1\32\32\0\6\32\1\u0341"+
    "\30\32\1\0\1\32\66\0\1\u0273\1\0\1\u0273\1\u0342"+
    "\67\0\1\u0273\1\0\1\u0273\33\0\45\u0189\1\41\1\u0275"+
    "\24\u0189\1\0\5\32\1\u0343\31\32\1\0\1\32\32\0"+
    "\6\32\1\u0344\30\32\1\0\1\32\32\0\1\u0345\36\32"+
    "\1\0\1\32\32\0\14\32\1\u0346\22\32\1\0\1\32"+
    "\32\0\12\32\1\u0347\24\32\1\0\1\32\32\0\23\32"+
    "\1\u0348\13\32\1\0\1\32\32\0\7\32\1\u0349\27\32"+
    "\1\0\1\32\32\0\7\32\1\u034a\27\32\1\0\1\32"+
    "\32\0\7\32\1\u034b\27\32\1\0\1\32\32\0\14\32"+
    "\1\u034c\22\32\1\0\1\32\32\0\2\32\1\u034d\5\32"+
    "\1\u034e\26\32\1\0\1\32\32\0\3\32\1\u034f\33\32"+
    "\1\0\1\32\32\0\6\32\1\u0350\30\32\1\0\1\32"+
    "\32\0\7\32\1\u0351\27\32\1\0\1\32\32\0\13\32"+
    "\1\u0352\23\32\1\0\1\32\32\0\11\32\1\u0353\25\32"+
    "\1\0\1\32\32\0\3\32\1\u0354\33\32\1\0\1\32"+
    "\32\0\6\32\1\u0355\30\32\1\0\1\32\32\0\4\32"+
    "\1\u0356\32\32\1\0\1\32\32\0\1\u0357\36\32\1\0"+
    "\1\32\32\0\26\32\1\u0358\10\32\1\0\1\32\32\0"+
    "\3\32\1\u0359\33\32\1\0\1\32\32\0\11\32\1\u035a"+
    "\25\32\1\0\1\32\32\0\1\u035b\36\32\1\0\1\32"+
    "\32\0\14\32\1\u035c\22\32\1\0\1\32\32\0\13\32"+
    "\1\u035d\23\32\1\0\1\32\32\0\14\32\1\u035e\22\32"+
    "\1\0\1\32\32\0\6\32\1\u035f\30\32\1\0\1\32"+
    "\32\0\25\32\1\u0360\11\32\1\0\1\32\32\0\1\u0361"+
    "\36\32\1\0\1\32\32\0\12\32\1\u0362\24\32\1\0"+
    "\1\32\32\0\11\32\1\u0363\25\32\1\0\1\32\32\0"+
    "\1\u0364\36\32\1\0\1\32\32\0\3\32\1\u0365\33\32"+
    "\1\0\1\32\32\0\26\32\1\u0366\10\32\1\0\1\32"+
    "\32\0\5\32\1\u0367\31\32\1\0\1\32\32\0\6\32"+
    "\1\u0368\30\32\1\0\1\32\32\0\1\u0369\36\32\1\0"+
    "\1\32\32\0\12\32\1\u036a\24\32\1\0\1\32\32\0"+
    "\3\32\1\u036b\33\32\1\0\1\32\32\0\7\32\1\u036c"+
    "\27\32\1\0\1\32\32\0\24\32\1\u036d\12\32\1\0"+
    "\1\32\32\0\3\32\1\u036e\33\32\1\0\1\32\32\0"+
    "\7\32\1\u036f\27\32\1\0\1\32\32\0\2\32\1\u0370"+
    "\34\32\1\0\1\32\32\0\1\u0371\36\32\1\0\1\32"+
    "\32\0\14\32\1\u0372\22\32\1\0\1\32\32\0\11\32"+
    "\1\u0373\25\32\1\0\1\32\32\0\6\32\1\u0374\30\32"+
    "\1\0\1\32\32\0\3\32\1\u0375\33\32\1\0\1\32"+
    "\32\0\11\32\1\u0376\25\32\1\0\1\32\32\0\1\u0377"+
    "\3\32\1\u0378\32\32\1\0\1\32\32\0\1\u0379\36\32"+
    "\1\0\1\32\32\0\7\32\1\u037a\27\32\1\0\1\32"+
    "\32\0\3\32\1\u037b\33\32\1\0\1\32\32\0\24\32"+
    "\1\u037c\12\32\1\0\1\32\32\0\7\32\1\u037d\27\32"+
    "\1\0\1\32\32\0\23\32\1\u037e\13\32\1\0\1\32"+
    "\32\0\30\32\1\u037f\6\32\1\0\1\32\32\0\4\32"+
    "\1\u0380\32\32\1\0\1\32\32\0\12\32\1\u0381\24\32"+
    "\1\0\1\32\32\0\10\32\1\u0382\26\32\1\0\1\32"+
    "\32\0\6\32\1\u0383\30\32\1\0\1\32\32\0\6\32"+
    "\1\u0384\30\32\1\0\1\32\32\0\2\32\1\u0385\34\32"+
    "\1\0\1\32\32\0\13\32\1\u0386\23\32\1\0\1\32"+
    "\32\0\3\32\1\u0387\33\32\1\0\1\32\32\0\2\32"+
    "\1\u0388\34\32\1\0\1\32\32\0\6\32\1\u0389\30\32"+
    "\1\0\1\32\32\0\12\32\1\u038a\24\32\1\0\1\32"+
    "\32\0\14\32\1\u038b\22\32\1\0\1\32\32\0\11\32"+
    "\1\u038c\25\32\1\0\1\32\32\0\12\32\1\u038d\24\32"+
    "\1\0\1\32\32\0\10\32\1\u038e\26\32\1\0\1\32"+
    "\32\0\14\32\1\u038f\22\32\1\0\1\32\32\0\2\32"+
    "\1\u0390\34\32\1\0\1\32\32\0\6\32\1\u0391\30\32"+
    "\1\0\1\32\32\0\6\32\1\u0392\30\32\1\0\1\32"+
    "\32\0\7\32\1\u0393\27\32\1\0\1\32\32\0\14\32"+
    "\1\u0394\22\32\1\0\1\32\32\0\12\32\1\u0395\24\32"+
    "\1\0\1\32\32\0\7\32\1\u0396\27\32\1\0\1\32"+
    "\32\0\10\32\1\u0397\26\32\1\0\1\32\32\0\4\32"+
    "\1\u0398\32\32\1\0\1\32\32\0\23\32\1\u0399\13\32"+
    "\1\0\1\32\32\0\6\32\1\u039a\30\32\1\0\1\32"+
    "\32\0\2\32\1\u039b\34\32\1\0\1\32\32\0\6\32"+
    "\1\u039c\30\32\1\0\1\32\32\0\2\32\1\u039d\15\32"+
    "\1\u039e\16\32\1\0\1\32\32\0\7\32\1\u039f\27\32"+
    "\1\0\1\32\32\0\13\32\1\u03a0\23\32\1\0\1\32"+
    "\32\0\1\u03a1\36\32\1\0\1\32\32\0\1\u03a2\36\32"+
    "\1\0\1\32\32\0\11\32\1\u03a3\25\32\1\0\1\32"+
    "\32\0\11\32\1\u03a4\25\32\1\0\1\32\32\0\1\u03a5"+
    "\36\32\1\0\1\32\32\0\12\32\1\u03a6\24\32\1\0"+
    "\1\32\32\0\2\32\1\u03a7\34\32\1\0\1\32\32\0"+
    "\10\32\1\u03a8\26\32\1\0\1\32\32\0\5\32\1\u03a9"+
    "\31\32\1\0\1\32\32\0\27\32\1\u03aa\7\32\1\0"+
    "\1\32\32\0\11\32\1\u03ab\25\32\1\0\1\32\32\0"+
    "\1\u03ac\36\32\1\0\1\32\32\0\7\32\1\u03ad\27\32"+
    "\1\0\1\32\32\0\12\32\1\u03ae\24\32\1\0\1\32"+
    "\32\0\3\32\1\u03af\33\32\1\0\1\32\32\0\11\32"+
    "\1\u03b0\25\32\1\0\1\32\32\0\7\32\1\u03b1\27\32"+
    "\1\0\1\32\32\0\7\32\1\u03b2\27\32\1\0\1\32"+
    "\32\0\14\32\1\u03b3\22\32\1\0\1\32\32\0\1\u03b4"+
    "\36\32\1\0\1\32\32\0\4\32\1\u03b5\32\32\1\0"+
    "\1\32\32\0\14\32\1\u03b6\22\32\1\0\1\32\32\0"+
    "\3\32\1\u03b7\33\32\1\0\1\32\32\0\12\32\1\u03b8"+
    "\24\32\1\0\1\32\32\0\11\32\1\u03b9\25\32\1\0"+
    "\1\32\32\0\12\32\1\u03ba\24\32\1\0\1\32\32\0"+
    "\11\32\1\u03bb\25\32\1\0\1\32\32\0\14\32\1\u03bc"+
    "\22\32\1\0\1\32\32\0\1\u03bd\36\32\1\0\1\32"+
    "\32\0\5\32\1\u03be\31\32\1\0\1\32\32\0\11\32"+
    "\1\u03bf\25\32\1\0\1\32\32\0\7\32\1\u03c0\27\32"+
    "\1\0\1\32\32\0\3\32\1\u03c1\33\32\1\0\1\32"+
    "\32\0\14\32\1\u03c2\22\32\1\0\1\32\32\0\11\32"+
    "\1\u03c3\25\32\1\0\1\32\32\0\11\32\1\u03c4\25\32"+
    "\1\0\1\32\32\0\12\32\1\u03c5\24\32\1\0\1\32"+
    "\32\0\27\32\1\u03c6\7\32\1\0\1\32\32\0\23\32"+
    "\1\u03c7\13\32\1\0\1\32\32\0\7\32\1\u03c8\27\32"+
    "\1\0\1\32\32\0\6\32\1\u03c9\30\32\1\0\1\32"+
    "\32\0\10\32\1\u03ca\26\32\1\0\1\32\32\0\7\32"+
    "\1\u03cb\27\32\1\0\1\32\32\0\21\32\1\u03cc\15\32"+
    "\1\0\1\32\32\0\3\32\1\u03cd\33\32\1\0\1\32"+
    "\32\0\2\32\1\u03ce\34\32\1\0\1\32\32\0\1\u03cf"+
    "\36\32\1\0\1\32\32\0\11\32\1\u03d0\25\32\1\0"+
    "\1\32\32\0\12\32\1\u03d1\24\32\1\0\1\32\32\0"+
    "\4\32\1\u03d2\32\32\1\0\1\32\32\0\6\32\1\u03d3"+
    "\30\32\1\0\1\32\32\0\4\32\1\u03d4\32\32\1\0"+
    "\1\32\32\0\1\u03d5\36\32\1\0\1\32\32\0\11\32"+
    "\1\u03d6\25\32\1\0\1\32\32\0\10\32\1\u03d7\26\32"+
    "\1\0\1\32\32\0\12\32\1\u03d8\24\32\1\0\1\32"+
    "\32\0\13\32\1\u03d9\23\32\1\0\1\32\32\0\14\32"+
    "\1\u03da\22\32\1\0\1\32\32\0\2\32\1\u03db\34\32"+
    "\1\0\1\32\32\0\14\32\1\u03dc\22\32\1\0\1\32"+
    "\32\0\4\32\1\u03dd\32\32\1\0\1\32\32\0\14\32"+
    "\1\u03de\22\32\1\0\1\32\32\0\3\32\1\u03df\33\32"+
    "\1\0\1\32\32\0\12\32\1\u03e0\24\32\1\0\1\32"+
    "\32\0\6\32\1\u03e1\30\32\1\0\1\32\32\0\20\32"+
    "\1\u03e2\16\32\1\0\1\32\32\0\7\32\1\u03e3\27\32"+
    "\1\0\1\32\32\0\7\32\1\u03e4\27\32\1\0\1\32"+
    "\32\0\27\32\1\u03e5\7\32\1\0\1\32\32\0\1\u03e6"+
    "\36\32\1\0\1\32\32\0\21\32\1\u03e7\15\32\1\0"+
    "\1\32\32\0\14\32\1\u03e8\22\32\1\0\1\32\32\0"+
    "\11\32\1\u03e9\25\32\1\0\1\32\32\0\1\u03ea\36\32"+
    "\1\0\1\32\32\0\7\32\1\u03eb\27\32\1\0\1\32"+
    "\66\0\1\u0342\1\0\1\u0342\34\0\6\32\1\u03ec\30\32"+
    "\1\0\1\32\32\0\11\32\1\u03ed\25\32\1\0\1\32"+
    "\32\0\6\32\1\u03ee\30\32\1\0\1\32\32\0\11\32"+
    "\1\u03ef\25\32\1\0\1\32\32\0\12\32\1\u03f0\24\32"+
    "\1\0\1\32\32\0\12\32\1\u03f1\24\32\1\0\1\32"+
    "\32\0\11\32\1\u03f2\25\32\1\0\1\32\32\0\6\32"+
    "\1\u03f3\30\32\1\0\1\32\32\0\12\32\1\u03f4\24\32"+
    "\1\0\1\32\32\0\14\32\1\u03f5\22\32\1\0\1\32"+
    "\32\0\6\32\1\u03f6\30\32\1\0\1\32\32\0\12\32"+
    "\1\u03f7\24\32\1\0\1\32\32\0\11\32\1\u03f8\25\32"+
    "\1\0\1\32\32\0\25\32\1\u03f9\11\32\1\0\1\32"+
    "\32\0\25\32\1\u03fa\11\32\1\0\1\32\32\0\24\32"+
    "\1\u03fb\12\32\1\0\1\32\32\0\12\32\1\u03fc\24\32"+
    "\1\0\1\32\32\0\6\32\1\u03fd\30\32\1\0\1\32"+
    "\32\0\3\32\1\u03fe\33\32\1\0\1\32\32\0\7\32"+
    "\1\u03ff\27\32\1\0\1\32\32\0\12\32\1\u0400\24\32"+
    "\1\0\1\32\32\0\4\32\1\u0401\32\32\1\0\1\32"+
    "\32\0\23\32\1\u0402\13\32\1\0\1\32\32\0\2\32"+
    "\1\u0403\34\32\1\0\1\32\32\0\6\32\1\u0404\30\32"+
    "\1\0\1\32\32\0\24\32\1\u0405\12\32\1\0\1\32"+
    "\32\0\4\32\1\u0406\32\32\1\0\1\32\32\0\7\32"+
    "\1\u0407\27\32\1\0\1\32\32\0\2\32\1\u0408\34\32"+
    "\1\0\1\32\32\0\21\32\1\u0409\15\32\1\0\1\32"+
    "\32\0\21\32\1\u040a\15\32\1\0\1\32\32\0\12\32"+
    "\1\u040b\24\32\1\0\1\32\32\0\6\32\1\u040c\30\32"+
    "\1\0\1\32\32\0\6\32\1\u040d\30\32\1\0\1\32"+
    "\32\0\1\u040e\36\32\1\0\1\32\32\0\4\32\1\u040f"+
    "\32\32\1\0\1\32\32\0\1\u0410\36\32\1\0\1\32"+
    "\32\0\17\32\1\u0411\17\32\1\0\1\32\32\0\1\u0412"+
    "\36\32\1\0\1\32\32\0\12\32\1\u0413\24\32\1\0"+
    "\1\32\32\0\12\32\1\u0414\24\32\1\0\1\32\32\0"+
    "\10\32\1\u0415\26\32\1\0\1\32\32\0\1\u0416\36\32"+
    "\1\0\1\32\32\0\6\32\1\u0417\30\32\1\0\1\32"+
    "\32\0\14\32\1\u0418\22\32\1\0\1\32\32\0\12\32"+
    "\1\u0419\24\32\1\0\1\32\32\0\1\u041a\36\32\1\0"+
    "\1\32\32\0\6\32\1\u041b\30\32\1\0\1\32\32\0"+
    "\7\32\1\u041c\27\32\1\0\1\32\32\0\1\u041d\36\32"+
    "\1\0\1\32\32\0\6\32\1\u041e\30\32\1\0\1\32"+
    "\32\0\7\32\1\u041f\27\32\1\0\1\32\32\0\11\32"+
    "\1\u0420\25\32\1\0\1\32\32\0\7\32\1\u0421\27\32"+
    "\1\0\1\32\32\0\21\32\1\u0422\15\32\1\0\1\32"+
    "\32\0\10\32\1\u0423\26\32\1\0\1\32\32\0\7\32"+
    "\1\u0424\1\32\1\u0425\25\32\1\0\1\32\32\0\1\u0426"+
    "\36\32\1\0\1\32\32\0\12\32\1\u0427\24\32\1\0"+
    "\1\32\32\0\5\32\1\u0428\31\32\1\0\1\32\32\0"+
    "\6\32\1\u0429\30\32\1\0\1\32\32\0\6\32\1\u042a"+
    "\30\32\1\0\1\32\32\0\23\32\1\u042b\13\32\1\0"+
    "\1\32\32\0\7\32\1\u042c\27\32\1\0\1\32\32\0"+
    "\14\32\1\u042d\22\32\1\0\1\32\32\0\6\32\1\u042e"+
    "\30\32\1\0\1\32\32\0\6\32\1\u042f\30\32\1\0"+
    "\1\32\32\0\7\32\1\u0430\27\32\1\0\1\32\32\0"+
    "\3\32\1\u0431\33\32\1\0\1\32\32\0\11\32\1\u0432"+
    "\25\32\1\0\1\32\32\0\11\32\1\u0433\25\32\1\0"+
    "\1\32\32\0\7\32\1\u0434\27\32\1\0\1\32\32\0"+
    "\1\u0435\36\32\1\0\1\32\32\0\14\32\1\u0436\22\32"+
    "\1\0\1\32\32\0\7\32\1\u0437\27\32\1\0\1\32"+
    "\32\0\4\32\1\u0438\32\32\1\0\1\32\32\0\6\32"+
    "\1\u0439\30\32\1\0\1\32\32\0\6\32\1\u043a\30\32"+
    "\1\0\1\32\32\0\1\u043b\36\32\1\0\1\32\32\0"+
    "\4\32\1\u043c\32\32\1\0\1\32\32\0\1\u043d\36\32"+
    "\1\0\1\32\32\0\6\32\1\u043e\30\32\1\0\1\32"+
    "\32\0\22\32\1\u043f\14\32\1\0\1\32\32\0\2\32"+
    "\1\u0440\34\32\1\0\1\32\32\0\10\32\1\u0441\26\32"+
    "\1\0\1\32\32\0\2\32\1\u0442\34\32\1\0\1\32"+
    "\32\0\10\32\1\u0443\26\32\1\0\1\32\32\0\1\32"+
    "\1\u0444\21\32\1\u0445\13\32\1\0\1\32\32\0\13\32"+
    "\1\u0446\23\32\1\0\1\32\32\0\7\32\1\u0447\27\32"+
    "\1\0\1\32\32\0\4\32\1\u0448\32\32\1\0\1\32"+
    "\32\0\6\32\1\u0449\30\32\1\0\1\32\32\0\1\u044a"+
    "\6\32\1\u044b\27\32\1\0\1\32\32\0\2\32\1\u044c"+
    "\34\32\1\0\1\32\32\0\10\32\1\u044d\26\32\1\0"+
    "\1\32\32\0\1\32\1\u044e\35\32\1\0\1\32\32\0"+
    "\12\32\1\u044f\24\32\1\0\1\32\32\0\10\32\1\u0450"+
    "\26\32\1\0\1\32\32\0\14\32\1\u0451\22\32\1\0"+
    "\1\32\32\0\10\32\1\u0452\26\32\1\0\1\32\32\0"+
    "\12\32\1\u0453\24\32\1\0\1\32\32\0\13\32\1\u0454"+
    "\23\32\1\0\1\32\32\0\30\32\1\u0455\6\32\1\0"+
    "\1\32\32\0\12\32\1\u0456\24\32\1\0\1\32\32\0"+
    "\7\32\1\u0457\27\32\1\0\1\32\32\0\10\32\1\u0458"+
    "\26\32\1\0\1\32\32\0\20\32\1\u0459\16\32\1\0"+
    "\1\32\32\0\2\32\1\u045a\34\32\1\0\1\32\32\0"+
    "\11\32\1\u045b\25\32\1\0\1\32\32\0\11\32\1\u045c"+
    "\25\32\1\0\1\32\32\0\1\u045d\36\32\1\0\1\32"+
    "\32\0\12\32\1\u045e\24\32\1\0\1\32\32\0\10\32"+
    "\1\u045f\26\32\1\0\1\32\32\0\14\32\1\u0460\22\32"+
    "\1\0\1\32\32\0\12\32\1\u0461\24\32\1\0\1\32"+
    "\32\0\21\32\1\u0462\15\32\1\0\1\32\32\0\4\32"+
    "\1\u0463\32\32\1\0\1\32\32\0\3\32\1\u0464\33\32"+
    "\1\0\1\32\32\0\6\32\1\u0465\30\32\1\0\1\32"+
    "\32\0\5\32\1\u0466\31\32\1\0\1\32\32\0\20\32"+
    "\1\u0467\16\32\1\0\1\32\32\0\11\32\1\u0468\25\32"+
    "\1\0\1\32\32\0\7\32\1\u0469\27\32\1\0\1\32"+
    "\32\0\7\32\1\u046a\27\32\1\0\1\32\32\0\15\32"+
    "\1\u046b\21\32\1\0\1\32\32\0\14\32\1\u046c\22\32"+
    "\1\0\1\32\32\0\25\32\1\u046d\11\32\1\0\1\32"+
    "\32\0\7\32\1\u046e\27\32\1\0\1\32\32\0\7\32"+
    "\1\u046f\27\32\1\0\1\32\32\0\3\32\1\u0470\33\32"+
    "\1\0\1\32\32\0\12\32\1\u0471\24\32\1\0\1\32"+
    "\32\0\12\32\1\u0472\24\32\1\0\1\32\32\0\13\32"+
    "\1\u0473\23\32\1\0\1\32\32\0\3\32\1\u0474\33\32"+
    "\1\0\1\32\32\0\10\32\1\u0475\26\32\1\0\1\32"+
    "\32\0\30\32\1\u0476\6\32\1\0\1\32\32\0\7\32"+
    "\1\u0477\27\32\1\0\1\32\32\0\3\32\1\u0478\33\32"+
    "\1\0\1\32\32\0\7\32\1\u0479\27\32\1\0\1\32"+
    "\32\0\17\32\1\u047a\17\32\1\0\1\32\32\0\21\32"+
    "\1\u047b\15\32\1\0\1\32\32\0\12\32\1\u047c\24\32"+
    "\1\0\1\32\32\0\11\32\1\u047d\25\32\1\0\1\32"+
    "\32\0\25\32\1\u047e\11\32\1\0\1\32\32\0\15\32"+
    "\1\u047f\21\32\1\0\1\32\32\0\10\32\1\u0480\26\32"+
    "\1\0\1\32\32\0\4\32\1\u0481\32\32\1\0\1\32"+
    "\32\0\5\32\1\u0482\31\32\1\0\1\32\32\0\12\32"+
    "\1\u0483\24\32\1\0\1\32\32\0\6\32\1\u0484\30\32"+
    "\1\0\1\32\32\0\7\32\1\u0485\27\32\1\0\1\32"+
    "\32\0\14\32\1\u0486\22\32\1\0\1\32\32\0\11\32"+
    "\1\u0487\25\32\1\0\1\32\32\0\7\32\1\u0488\27\32"+
    "\1\0\1\32\32\0\2\32\1\u0489\34\32\1\0\1\32"+
    "\32\0\6\32\1\u048a\30\32\1\0\1\32\32\0\1\u048b"+
    "\36\32\1\0\1\32\32\0\2\32\1\u048c\34\32\1\0"+
    "\1\32\32\0\14\32\1\u048d\22\32\1\0\1\32\32\0"+
    "\7\32\1\u048e\27\32\1\0\1\32\32\0\7\32\1\u048f"+
    "\27\32\1\0\1\32\32\0\26\32\1\u0490\10\32\1\0"+
    "\1\32\32\0\14\32\1\u0491\22\32\1\0\1\32\32\0"+
    "\7\32\1\u0492\27\32\1\0\1\32\32\0\26\32\1\u0493"+
    "\10\32\1\0\1\32\32\0\7\32\1\u0494\27\32\1\0"+
    "\1\32\32\0\21\32\1\u0495\15\32\1\0\1\32\32\0"+
    "\6\32\1\u0496\30\32\1\0\1\32\32\0\6\32\1\u0497"+
    "\30\32\1\0\1\32\32\0\7\32\1\u0498\27\32\1\0"+
    "\1\32\32\0\20\32\1\u0499\16\32\1\0\1\32\32\0"+
    "\14\32\1\u049a\22\32\1\0\1\32\32\0\11\32\1\u049b"+
    "\25\32\1\0\1\32\32\0\10\32\1\u049c\26\32\1\0"+
    "\1\32\32\0\4\32\1\u049d\32\32\1\0\1\32\32\0"+
    "\3\32\1\u049e\33\32\1\0\1\32\32\0\13\32\1\u049f"+
    "\23\32\1\0\1\32\32\0\7\32\1\u04a0\27\32\1\0"+
    "\1\32\32\0\3\32\1\u04a1\33\32\1\0\1\32\32\0"+
    "\11\32\1\u04a2\25\32\1\0\1\32\32\0\2\32\1\u04a3"+
    "\34\32\1\0\1\32\32\0\7\32\1\u04a4\27\32\1\0"+
    "\1\32\32\0\11\32\1\u04a5\25\32\1\0\1\32\32\0"+
    "\3\32\1\u04a6\33\32\1\0\1\32\32\0\7\32\1\u04a7"+
    "\27\32\1\0\1\32\32\0\25\32\1\u04a8\11\32\1\0"+
    "\1\32\32\0\7\32\1\u04a9\27\32\1\0\1\32\32\0"+
    "\12\32\1\u04aa\24\32\1\0\1\32\32\0\11\32\1\u04ab"+
    "\25\32\1\0\1\32\32\0\3\32\1\u04ac\33\32\1\0"+
    "\1\32\32\0\6\32\1\u04ad\30\32\1\0\1\32\32\0"+
    "\10\32\1\u04ae\26\32\1\0\1\32\32\0\4\32\1\u04af"+
    "\32\32\1\0\1\32\32\0\4\32\1\u04b0\32\32\1\0"+
    "\1\32\32\0\3\32\1\u04b1\33\32\1\0\1\32\32\0"+
    "\15\32\1\u04b2\21\32\1\0\1\32\32\0\6\32\1\u04b3"+
    "\30\32\1\0\1\32\32\0\4\32\1\u04b4\32\32\1\0"+
    "\1\32\32\0\7\32\1\u04b5\27\32\1\0\1\32\32\0"+
    "\6\32\1\u04b6\30\32\1\0\1\32\32\0\7\32\1\u04b7"+
    "\27\32\1\0\1\32\32\0\1\u04b8\36\32\1\0\1\32"+
    "\32\0\7\32\1\u04b9\27\32\1\0\1\32\32\0\6\32"+
    "\1\u04ba\30\32\1\0\1\32\32\0\25\32\1\u04bb\11\32"+
    "\1\0\1\32\32\0\1\32\1\u04bc\35\32\1\0\1\32"+
    "\32\0\13\32\1\u04bd\23\32\1\0\1\32\32\0\6\32"+
    "\1\u04be\30\32\1\0\1\32\32\0\6\32\1\u04bf\30\32"+
    "\1\0\1\32\32\0\5\32\1\u04c0\31\32\1\0\1\32"+
    "\32\0\7\32\1\u04c1\27\32\1\0\1\32\32\0\3\32"+
    "\1\u04c2\33\32\1\0\1\32\32\0\22\32\1\u04c3\14\32"+
    "\1\0\1\32\32\0\6\32\1\u04c4\30\32\1\0\1\32"+
    "\32\0\10\32\1\u04c5\26\32\1\0\1\32\32\0\6\32"+
    "\1\u04c6\30\32\1\0\1\32\32\0\4\32\1\u04c7\32\32"+
    "\1\0\1\32\32\0\6\32\1\u04c8\30\32\1\0\1\32"+
    "\32\0\7\32\1\u04c9\27\32\1\0\1\32\32\0\21\32"+
    "\1\u04ca\15\32\1\0\1\32\32\0\4\32\1\u04cb\32\32"+
    "\1\0\1\32\32\0\6\32\1\u04cc\30\32\1\0\1\32"+
    "\32\0\10\32\1\u04cd\26\32\1\0\1\32\32\0\22\32"+
    "\1\u04ce\14\32\1\0\1\32\32\0\21\32\1\u04cf\15\32"+
    "\1\0\1\32\32\0\12\32\1\u04d0\24\32\1\0\1\32"+
    "\32\0\14\32\1\u04d1\22\32\1\0\1\32\32\0\7\32"+
    "\1\u04d2\27\32\1\0\1\32\32\0\3\32\1\u04d3\33\32"+
    "\1\0\1\32\32\0\21\32\1\u04d4\15\32\1\0\1\32"+
    "\32\0\21\32\1\u04d5\15\32\1\0\1\32\32\0\30\32"+
    "\1\u04d6\6\32\1\0\1\32\32\0\14\32\1\u04d7\22\32"+
    "\1\0\1\32\32\0\14\32\1\u04d8\22\32\1\0\1\32"+
    "\32\0\25\32\1\u04d9\11\32\1\0\1\32\32\0\12\32"+
    "\1\u04da\24\32\1\0\1\32\32\0\6\32\1\u04db\30\32"+
    "\1\0\1\32\32\0\6\32\1\u04dc\30\32\1\0\1\32"+
    "\32\0\12\32\1\u04dd\24\32\1\0\1\32\32\0\1\u04de"+
    "\36\32\1\0\1\32\32\0\6\32\1\u04df\30\32\1\0"+
    "\1\32\32\0\21\32\1\u04e0\15\32\1\0\1\32\32\0"+
    "\10\32\1\u04e1\26\32\1\0\1\32\32\0\5\32\1\u04e2"+
    "\31\32\1\0\1\32\32\0\1\u04e3\36\32\1\0\1\32"+
    "\32\0\2\32\1\u04e4\17\32\1\u04e5\14\32\1\0\1\32"+
    "\32\0\3\32\1\u04e6\33\32\1\0\1\32\32\0\2\32"+
    "\1\u04e7\34\32\1\0\1\32\32\0\12\32\1\u04e8\24\32"+
    "\1\0\1\32\32\0\12\32\1\u04e9\24\32\1\0\1\32"+
    "\32\0\11\32\1\u04ea\25\32\1\0\1\32\32\0\2\32"+
    "\1\u04eb\34\32\1\0\1\32\32\0\7\32\1\u04ec\27\32"+
    "\1\0\1\32\32\0\15\32\1\u04ed\21\32\1\0\1\32"+
    "\32\0\30\32\1\u04ee\6\32\1\0\1\32\32\0\23\32"+
    "\1\u04ef\13\32\1\0\1\32\32\0\15\32\1\u04f0\21\32"+
    "\1\0\1\32\32\0\23\32\1\u04f1\13\32\1\0\1\32"+
    "\32\0\25\32\1\u04f2\11\32\1\0\1\32\32\0\11\32"+
    "\1\u04f3\25\32\1\0\1\32\32\0\7\32\1\u04f4\1\32"+
    "\1\u04f5\25\32\1\0\1\32\32\0\7\32\1\u04f6\27\32"+
    "\1\0\1\32\32\0\12\32\1\u04f7\24\32\1\0\1\32"+
    "\32\0\3\32\1\u04f8\33\32\1\0\1\32\32\0\12\32"+
    "\1\u04f9\24\32\1\0\1\32\32\0\12\32\1\u04fa\24\32"+
    "\1\0\1\32\32\0\12\32\1\u04fb\24\32\1\0\1\32"+
    "\32\0\6\32\1\u04fc\30\32\1\0\1\32\32\0\3\32"+
    "\1\u04fd\33\32\1\0\1\32\32\0\12\32\1\u04fe\24\32"+
    "\1\0\1\32\32\0\13\32\1\u04ff\23\32\1\0\1\32"+
    "\32\0\5\32\1\u0500\1\u0501\4\32\1\u0502\23\32\1\0"+
    "\1\32\32\0\14\32\1\u0503\22\32\1\0\1\32\32\0"+
    "\21\32\1\u0504\15\32\1\0\1\32\32\0\12\32\1\u0505"+
    "\24\32\1\0\1\32\32\0\12\32\1\u0506\24\32\1\0"+
    "\1\32\32\0\11\32\1\u0507\25\32\1\0\1\32\32\0"+
    "\6\32\1\u0508\30\32\1\0\1\32\32\0\15\32\1\u0509"+
    "\21\32\1\0\1\32\32\0\14\32\1\u050a\22\32\1\0"+
    "\1\32\32\0\10\32\1\u050b\14\32\1\u050c\11\32\1\0"+
    "\1\32\32\0\7\32\1\u050d\27\32\1\0\1\32\32\0"+
    "\14\32\1\u050e\22\32\1\0\1\32\32\0\7\32\1\u050f"+
    "\27\32\1\0\1\32\32\0\6\32\1\u0510\30\32\1\0"+
    "\1\32\32\0\3\32\1\u0511\33\32\1\0\1\32\32\0"+
    "\13\32\1\u0512\23\32\1\0\1\32\32\0\4\32\1\u0513"+
    "\32\32\1\0\1\32\32\0\11\32\1\u0514\25\32\1\0"+
    "\1\32\32\0\6\32\1\u0515\30\32\1\0\1\32\32\0"+
    "\10\32\1\u0516\26\32\1\0\1\32\32\0\14\32\1\u0517"+
    "\22\32\1\0\1\32\32\0\3\32\1\u0518\33\32\1\0"+
    "\1\32\32\0\15\32\1\u0519\21\32\1\0\1\32\32\0"+
    "\5\32\1\u051a\31\32\1\0\1\32\32\0\7\32\1\u051b"+
    "\27\32\1\0\1\32\32\0\11\32\1\u051c\25\32\1\0"+
    "\1\32\32\0\7\32\1\u051d\27\32\1\0\1\32\32\0"+
    "\7\32\1\u051e\27\32\1\0\1\32\32\0\12\32\1\u051f"+
    "\24\32\1\0\1\32\32\0\7\32\1\u0520\27\32\1\0"+
    "\1\32\32\0\14\32\1\u0521\22\32\1\0\1\32\32\0"+
    "\6\32\1\u0522\30\32\1\0\1\32\32\0\24\32\1\u0523"+
    "\12\32\1\0\1\32\32\0\3\32\1\u0524\33\32\1\0"+
    "\1\32\32\0\3\32\1\u0525\33\32\1\0\1\32\32\0"+
    "\6\32\1\u0526\30\32\1\0\1\32\32\0\6\32\1\u0527"+
    "\30\32\1\0\1\32\32\0\16\32\1\u0528\20\32\1\0"+
    "\1\32\32\0\2\32\1\u0529\34\32\1\0\1\32\32\0"+
    "\2\32\1\u052a\34\32\1\0\1\32\32\0\5\32\1\u052b"+
    "\31\32\1\0\1\32\32\0\11\32\1\u052c\25\32\1\0"+
    "\1\32\32\0\7\32\1\u052d\27\32\1\0\1\32\32\0"+
    "\10\32\1\u052e\26\32\1\0\1\32\32\0\7\32\1\u052f"+
    "\27\32\1\0\1\32\32\0\21\32\1\u0530\15\32\1\0"+
    "\1\32\32\0\21\32\1\u0531\15\32\1\0\1\32\32\0"+
    "\10\32\1\u0532\26\32\1\0\1\32\32\0\3\32\1\u0533"+
    "\33\32\1\0\1\32\32\0\6\32\1\u0534\30\32\1\0"+
    "\1\32\32\0\6\32\1\u0535\30\32\1\0\1\32\32\0"+
    "\4\32\1\u0536\32\32\1\0\1\32\32\0\16\32\1\u0537"+
    "\7\32\1\u0538\10\32\1\0\1\32\32\0\3\32\1\u0539"+
    "\33\32\1\0\1\32\32\0\3\32\1\u053a\33\32\1\0"+
    "\1\32\32\0\14\32\1\u053b\22\32\1\0\1\32\32\0"+
    "\11\32\1\u053c\25\32\1\0\1\32\32\0\12\32\1\u053d"+
    "\24\32\1\0\1\32\32\0\6\32\1\u053e\30\32\1\0"+
    "\1\32\32\0\1\u053f\36\32\1\0\1\32\32\0\12\32"+
    "\1\u0540\24\32\1\0\1\32\32\0\13\32\1\u0541\23\32"+
    "\1\0\1\32\32\0\2\32\1\u0542\34\32\1\0\1\32"+
    "\32\0\11\32\1\u0543\25\32\1\0\1\32\32\0\1\u0544"+
    "\36\32\1\0\1\32\32\0\25\32\1\u0545\11\32\1\0"+
    "\1\32\32\0\6\32\1\u0546\30\32\1\0\1\32\32\0"+
    "\6\32\1\u0547\30\32\1\0\1\32\32\0\20\32\1\u0548"+
    "\16\32\1\0\1\32\32\0\3\32\1\u0549\33\32\1\0"+
    "\1\32\32\0\11\32\1\u054a\25\32\1\0\1\32\32\0"+
    "\7\32\1\u054b\27\32\1\0\1\32\32\0\14\32\1\u054c"+
    "\22\32\1\0\1\32\32\0\7\32\1\u054d\27\32\1\0"+
    "\1\32\32\0\14\32\1\u054e\22\32\1\0\1\32\32\0"+
    "\5\32\1\u054f\31\32\1\0\1\32\32\0\7\32\1\u0550"+
    "\27\32\1\0\1\32\32\0\10\32\1\u0551\26\32\1\0"+
    "\1\32\32\0\7\32\1\u0552\27\32\1\0\1\32\32\0"+
    "\6\32\1\u0553\30\32\1\0\1\32\32\0\4\32\1\u0554"+
    "\32\32\1\0\1\32\32\0\14\32\1\u0555\22\32\1\0"+
    "\1\32\32\0\3\32\1\u0556\33\32\1\0\1\32\32\0"+
    "\2\32\1\u0557\34\32\1\0\1\32\32\0\2\32\1\u0558"+
    "\34\32\1\0\1\32\32\0\3\32\1\u0559\33\32\1\0"+
    "\1\32\32\0\1\u055a\36\32\1\0\1\32\32\0\12\32"+
    "\1\u055b\24\32\1\0\1\32\32\0\14\32\1\u055c\22\32"+
    "\1\0\1\32\32\0\1\u055d\36\32\1\0\1\32\32\0"+
    "\11\32\1\u055e\25\32\1\0\1\32\32\0\7\32\1\u055f"+
    "\27\32\1\0\1\32\32\0\13\32\1\u0560\23\32\1\0"+
    "\1\32\32\0\26\32\1\u0561\10\32\1\0\1\32\32\0"+
    "\15\32\1\u0562\21\32\1\0\1\32\32\0\22\32\1\u0563"+
    "\14\32\1\0\1\32\32\0\14\32\1\u0564\22\32\1\0"+
    "\1\32\32\0\6\32\1\u0565\30\32\1\0\1\32\32\0"+
    "\5\32\1\u0566\31\32\1\0\1\32\32\0\7\32\1\u0567"+
    "\27\32\1\0\1\32\32\0\3\32\1\u0568\33\32\1\0"+
    "\1\32\32\0\11\32\1\u0569\25\32\1\0\1\32\32\0"+
    "\12\32\1\u056a\24\32\1\0\1\32\32\0\12\32\1\u056b"+
    "\24\32\1\0\1\32\32\0\6\32\1\u056c\30\32\1\0"+
    "\1\32\32\0\12\32\1\u056d\24\32\1\0\1\32\32\0"+
    "\2\32\1\u056e\34\32\1\0\1\32\32\0\1\32\1\u056f"+
    "\35\32\1\0\1\32\32\0\11\32\1\u0570\25\32\1\0"+
    "\1\32\32\0\7\32\1\u0571\27\32\1\0\1\32\32\0"+
    "\26\32\1\u0572\10\32\1\0\1\32\32\0\6\32\1\u0573"+
    "\30\32\1\0\1\32\32\0\4\32\1\u0574\32\32\1\0"+
    "\1\32\32\0\16\32\1\u0575\20\32\1\0\1\32\32\0"+
    "\7\32\1\u0576\27\32\1\0\1\32\32\0\4\32\1\u0577"+
    "\32\32\1\0\1\32\32\0\12\32\1\u0578\24\32\1\0"+
    "\1\32\32\0\13\32\1\u0579\23\32\1\0\1\32\32\0"+
    "\7\32\1\u057a\27\32\1\0\1\32\32\0\14\32\1\u057b"+
    "\22\32\1\0\1\32\32\0\2\32\1\u057c\34\32\1\0"+
    "\1\32\32\0\13\32\1\u057d\23\32\1\0\1\32\32\0"+
    "\7\32\1\u057e\27\32\1\0\1\32\32\0\12\32\1\u057f"+
    "\24\32\1\0\1\32\32\0\5\32\1\u0580\31\32\1\0"+
    "\1\32\32\0\14\32\1\u0581\22\32\1\0\1\32\32\0"+
    "\4\32\1\u0582\32\32\1\0\1\32\32\0\1\32\1\u0583"+
    "\35\32\1\0\1\32\32\0\3\32\1\u0584\33\32\1\0"+
    "\1\32\32\0\14\32\1\u0585\22\32\1\0\1\32\32\0"+
    "\11\32\1\u0586\25\32\1\0\1\32\32\0\11\32\1\u0587"+
    "\25\32\1\0\1\32\32\0\23\32\1\u0588\13\32\1\0"+
    "\1\32\32\0\2\32\1\u0589\34\32\1\0\1\32\32\0"+
    "\16\32\1\u058a\20\32\1\0\1\32\32\0\14\32\1\u058b"+
    "\22\32\1\0\1\32\32\0\5\32\1\u058c\31\32\1\0"+
    "\1\32\32\0\12\32\1\u058d\24\32\1\0\1\32\32\0"+
    "\21\32\1\u058e\15\32\1\0\1\32\32\0\4\32\1\u058f"+
    "\32\32\1\0\1\32\32\0\12\32\1\u0590\24\32\1\0"+
    "\1\32\32\0\14\32\1\u0591\22\32\1\0\1\32\32\0"+
    "\7\32\1\u0592\27\32\1\0\1\32\32\0\7\32\1\u0593"+
    "\27\32\1\0\1\32\32\0\7\32\1\u0594\27\32\1\0"+
    "\1\32\32\0\2\32\1\u0595\34\32\1\0\1\32\32\0"+
    "\13\32\1\u0596\23\32\1\0\1\32\32\0\1\u0597\36\32"+
    "\1\0\1\32\32\0\23\32\1\u0598\13\32\1\0\1\32"+
    "\32\0\13\32\1\u0599\23\32\1\0\1\32\32\0\15\32"+
    "\1\u059a\21\32\1\0\1\32\32\0\4\32\1\u059b\32\32"+
    "\1\0\1\32\32\0\12\32\1\u059c\24\32\1\0\1\32"+
    "\32\0\6\32\1\u059d\30\32\1\0\1\32\32\0\4\32"+
    "\1\u059e\32\32\1\0\1\32\32\0\16\32\1\u059f\20\32"+
    "\1\0\1\32\32\0\10\32\1\u05a0\26\32\1\0\1\32"+
    "\32\0\14\32\1\u05a1\22\32\1\0\1\32\32\0\5\32"+
    "\1\u05a2\31\32\1\0\1\32\32\0\7\32\1\u05a3\27\32"+
    "\1\0\1\32\32\0\21\32\1\u05a4\15\32\1\0\1\32"+
    "\32\0\2\32\1\u05a5\34\32\1\0\1\32\32\0\12\32"+
    "\1\u05a6\24\32\1\0\1\32\32\0\7\32\1\u05a7\27\32"+
    "\1\0\1\32\32\0\1\32\1\u05a8\35\32\1\0\1\32"+
    "\32\0\7\32\1\u05a9\27\32\1\0\1\32\32\0\1\u05aa"+
    "\36\32\1\0\1\32\32\0\14\32\1\u05ab\22\32\1\0"+
    "\1\32\32\0\7\32\1\u05ac\27\32\1\0\1\32\32\0"+
    "\6\32\1\u05ad\30\32\1\0\1\32\32\0\6\32\1\u05ae"+
    "\30\32\1\0\1\32\32\0\21\32\1\u05af\15\32\1\0"+
    "\1\32\32\0\14\32\1\u05b0\22\32\1\0\1\32\32\0"+
    "\11\32\1\u05b1\25\32\1\0\1\32\32\0\14\32\1\u05b2"+
    "\22\32\1\0\1\32\32\0\1\u05b3\36\32\1\0\1\32"+
    "\32\0\7\32\1\u05b4\27\32\1\0\1\32\32\0\1\u05b5"+
    "\36\32\1\0\1\32\32\0\6\32\1\u05b6\30\32\1\0"+
    "\1\32\32\0\6\32\1\u05b7\30\32\1\0\1\32\32\0"+
    "\4\32\1\u05b8\32\32\1\0\1\32\32\0\11\32\1\u05b9"+
    "\25\32\1\0\1\32\32\0\2\32\1\u05ba\34\32\1\0"+
    "\1\32\32\0\26\32\1\u05bb\10\32\1\0\1\32\32\0"+
    "\16\32\1\u05bc\20\32\1\0\1\32\32\0\11\32\1\u05bd"+
    "\25\32\1\0\1\32\32\0\6\32\1\u05be\30\32\1\0"+
    "\1\32\32\0\7\32\1\u05bf\27\32\1\0\1\32\32\0"+
    "\23\32\1\u05c0\13\32\1\0\1\32\32\0\6\32\1\u05c1"+
    "\30\32\1\0\1\32\32\0\15\32\1\u05c2\21\32\1\0"+
    "\1\32\32\0\6\32\1\u05c3\30\32\1\0\1\32\32\0"+
    "\15\32\1\u05c4\21\32\1\0\1\32\32\0\6\32\1\u05c5"+
    "\4\32\1\u05c6\23\32\1\0\1\32\32\0\1\u05c7\36\32"+
    "\1\0\1\32\32\0\1\u05c8\36\32\1\0\1\32\32\0"+
    "\7\32\1\u05c9\27\32\1\0\1\32\32\0\1\32\1\u05ca"+
    "\35\32\1\0\1\32\32\0\1\32\1\u05cb\35\32\1\0"+
    "\1\32\32\0\6\32\1\u05cc\30\32\1\0\1\32\32\0"+
    "\4\32\1\u05cd\32\32\1\0\1\32\32\0\4\32\1\u05ce"+
    "\32\32\1\0\1\32\32\0\1\u05cf\36\32\1\0\1\32"+
    "\32\0\7\32\1\u05d0\27\32\1\0\1\32\32\0\7\32"+
    "\1\u05d1\27\32\1\0\1\32\32\0\11\32\1\u05d2\25\32"+
    "\1\0\1\32\32\0\4\32\1\u05d3\32\32\1\0\1\32"+
    "\32\0\2\32\1\u05d4\34\32\1\0\1\32\32\0\6\32"+
    "\1\u05d5\30\32\1\0\1\32\32\0\1\u05d6\36\32\1\0"+
    "\1\32\32\0\1\32\1\u05d7\35\32\1\0\1\32\32\0"+
    "\4\32\1\u05d8\32\32\1\0\1\32\32\0\7\32\1\u05d9"+
    "\27\32\1\0\1\32\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[70505];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\2\11\6\1\3\11\1\1\1\11\1\1\2\11"+
    "\173\1\1\11\1\0\1\11\2\0\12\11\310\1\1\0"+
    "\1\1\2\0\351\1\2\0\u0364\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1497];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value){ 
        return new Symbol(type, yyline, yycolumn, value);
    }
    public int Lineas(java.io.Reader reader) 
    {
        return yyline;
    }
    public int Columnas(java.io.Reader reader) 
    {
        return yycolumn;
    }
    public String Texto;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  F3_MiniSQL_F(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR, yycolumn, yyline, yytext());
            }
          case 369: break;
          case 2: 
            { return new Symbol(sym.IDENTIFICADOR, yycolumn, yyline, yytext());
            }
          case 370: break;
          case 3: 
            { return new Symbol(sym.ENTERO, yycolumn, yyline, yytext());
            }
          case 371: break;
          case 4: 
            { return new Symbol(sym.BOOLEANO, yycolumn, yyline, yytext());
            }
          case 372: break;
          case 5: 
            { return new Symbol(sym.PUNTO, yycolumn, yyline, yytext());
            }
          case 373: break;
          case 6: 
            { /*Ignore*/
            }
          case 374: break;
          case 7: 
            { return new Symbol(sym.DIVISION, yycolumn, yyline, yytext());
            }
          case 375: break;
          case 8: 
            { return new Symbol(sym.MULTIPLICACION, yycolumn, yyline, yytext());
            }
          case 376: break;
          case 9: 
            { return new Symbol(sym.RESTA, yycolumn, yyline, yytext());
            }
          case 377: break;
          case 10: 
            { return new Symbol(sym.SUMA, yycolumn, yyline, yytext());
            }
          case 378: break;
          case 11: 
            { return new Symbol(sym.PORCENTAJE, yycolumn, yyline, yytext());
            }
          case 379: break;
          case 12: 
            { return new Symbol(sym.MENOR, yycolumn, yyline, yytext());
            }
          case 380: break;
          case 13: 
            { return new Symbol(sym.IGUAL, yycolumn, yyline, yytext());
            }
          case 381: break;
          case 14: 
            { return new Symbol(sym.MAYOR, yycolumn, yyline, yytext());
            }
          case 382: break;
          case 15: 
            { return new Symbol(sym.ADMIRACION, yycolumn, yyline, yytext());
            }
          case 383: break;
          case 16: 
            { return new Symbol(sym.CORCHETE_I, yycolumn, yyline, yytext());
            }
          case 384: break;
          case 17: 
            { return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
          case 385: break;
          case 18: 
            { return new Symbol(sym.PUNTOYCOMA, yycolumn, yyline, yytext());
            }
          case 386: break;
          case 19: 
            { return new Symbol(sym.CORCHETE_D, yycolumn, yyline, yytext());
            }
          case 387: break;
          case 20: 
            { return new Symbol(sym.PARENTESIS_I, yycolumn, yyline, yytext());
            }
          case 388: break;
          case 21: 
            { return new Symbol(sym.PARENTESIS_D, yycolumn, yyline, yytext());
            }
          case 389: break;
          case 22: 
            { return new Symbol(sym.LLAVE_I, yycolumn, yyline, yytext());
            }
          case 390: break;
          case 23: 
            { return new Symbol(sym.LLAVE_D, yycolumn, yyline, yytext());
            }
          case 391: break;
          case 24: 
            { return new Symbol(sym.ARROBA, yycolumn, yyline, yytext());
            }
          case 392: break;
          case 25: 
            { return new Symbol(sym.NUMERAL, yycolumn, yyline, yytext());
            }
          case 393: break;
          case 26: 
            { return new Symbol(sym.AS, yycolumn, yyline, yytext());
            }
          case 394: break;
          case 27: 
            { return new Symbol(sym.AT, yycolumn, yyline, yytext());
            }
          case 395: break;
          case 28: 
            { return new Symbol(sym.BY, yycolumn, yyline, yytext());
            }
          case 396: break;
          case 29: 
            { return new Symbol(sym.ON, yycolumn, yyline, yytext());
            }
          case 397: break;
          case 30: 
            { return new Symbol(sym.OR, yycolumn, yyline, yytext());
            }
          case 398: break;
          case 31: 
            { return new Symbol(sym.OF, yycolumn, yyline, yytext());
            }
          case 399: break;
          case 32: 
            { return new Symbol(sym.TO, yycolumn, yyline, yytext());
            }
          case 400: break;
          case 33: 
            { return new Symbol(sym.IS, yycolumn, yyline, yytext());
            }
          case 401: break;
          case 34: 
            { return new Symbol(sym.IN, yycolumn, yyline, yytext());
            }
          case 402: break;
          case 35: 
            { return new Symbol(sym.IF, yycolumn, yyline, yytext());
            }
          case 403: break;
          case 36: 
            { return new Symbol(sym.NO, yycolumn, yyline, yytext());
            }
          case 404: break;
          case 37: 
            { return new Symbol(sym.GO, yycolumn, yyline, yytext());
            }
          case 405: break;
          case 38: 
            { return new Symbol(sym.DECIMALES, yycolumn, yyline, yytext());
            }
          case 406: break;
          case 39: 
            { return new Symbol(sym.OO, yycolumn, yyline, yytext());
            }
          case 407: break;
          case 40: 
            { return new Symbol(sym.CADENA, yycolumn, yyline, yytext());
            }
          case 408: break;
          case 41: 
            { return new Symbol(sym.MENOR_IGUAL, yycolumn, yyline, yytext());
            }
          case 409: break;
          case 42: 
            { return new Symbol(sym.DIFERENCIA2, yycolumn, yyline, yytext());
            }
          case 410: break;
          case 43: 
            { return new Symbol(sym.IGUAL_IGUAL, yycolumn, yyline, yytext());
            }
          case 411: break;
          case 44: 
            { return new Symbol(sym.MAYOR_IGUAL, yycolumn, yyline, yytext());
            }
          case 412: break;
          case 45: 
            { return new Symbol(sym.DIFERENCIA, yycolumn, yyline, yytext());
            }
          case 413: break;
          case 46: 
            { return new Symbol(sym.YY, yycolumn, yyline, yytext());
            }
          case 414: break;
          case 47: 
            { return new Symbol(sym.CORCHETES, yycolumn, yyline, yytext());
            }
          case 415: break;
          case 48: 
            { return new Symbol(sym.PARENTESIS, yycolumn, yyline, yytext());
            }
          case 416: break;
          case 49: 
            { return new Symbol(sym.LLAVES, yycolumn, yyline, yytext());
            }
          case 417: break;
          case 50: 
            { return new Symbol(sym.NUMERAL_DOBLE, yycolumn, yyline, yytext());
            }
          case 418: break;
          case 51: 
            { return new Symbol(sym.ASC, yycolumn, yyline, yytext());
            }
          case 419: break;
          case 52: 
            { return new Symbol(sym.ALL, yycolumn, yyline, yytext());
            }
          case 420: break;
          case 53: 
            { return new Symbol(sym.AND, yycolumn, yyline, yytext());
            }
          case 421: break;
          case 54: 
            { return new Symbol(sym.ANY, yycolumn, yyline, yytext());
            }
          case 422: break;
          case 55: 
            { return new Symbol(sym.ADA, yycolumn, yyline, yytext());
            }
          case 423: break;
          case 56: 
            { return new Symbol(sym.ADD, yycolumn, yyline, yytext());
            }
          case 424: break;
          case 57: 
            { return new Symbol(sym.ARE, yycolumn, yyline, yytext());
            }
          case 425: break;
          case 58: 
            { return new Symbol(sym.AVG, yycolumn, yyline, yytext());
            }
          case 426: break;
          case 59: 
            { return new Symbol(sym.BIT, yycolumn, yyline, yytext());
            }
          case 427: break;
          case 60: 
            { return new Symbol(sym.SUM, yycolumn, yyline, yytext());
            }
          case 428: break;
          case 61: 
            { return new Symbol(sym.SET, yycolumn, yyline, yytext());
            }
          case 429: break;
          case 62: 
            { return new Symbol(sym.SQL, yycolumn, yyline, yytext());
            }
          case 430: break;
          case 63: 
            { return new Symbol(sym.OUT, yycolumn, yyline, yytext());
            }
          case 431: break;
          case 64: 
            { return new Symbol(sym.OFF, yycolumn, yyline, yytext());
            }
          case 432: break;
          case 65: 
            { return new Symbol(sym.USE, yycolumn, yyline, yytext());
            }
          case 433: break;
          case 66: 
            { return new Symbol(sym.TOP, yycolumn, yyline, yytext());
            }
          case 434: break;
          case 67: 
            { return new Symbol(sym.END, yycolumn, yyline, yytext());
            }
          case 435: break;
          case 68: 
            { return new Symbol(sym.INT, yycolumn, yyline, yytext());
            }
          case 436: break;
          case 69: 
            { return new Symbol(sym.NOT, yycolumn, yyline, yytext());
            }
          case 437: break;
          case 70: 
            { return new Symbol(sym.DAY, yycolumn, yyline, yytext());
            }
          case 438: break;
          case 71: 
            { return new Symbol(sym.DEC, yycolumn, yyline, yytext());
            }
          case 439: break;
          case 72: 
            { return new Symbol(sym.GET, yycolumn, yyline, yytext());
            }
          case 440: break;
          case 73: 
            { return new Symbol(sym.KEY, yycolumn, yyline, yytext());
            }
          case 441: break;
          case 74: 
            { return new Symbol(sym.PAD, yycolumn, yyline, yytext());
            }
          case 442: break;
          case 75: 
            { return new Symbol(sym.MAX, yycolumn, yyline, yytext());
            }
          case 443: break;
          case 76: 
            { return new Symbol(sym.MIN, yycolumn, yyline, yytext());
            }
          case 444: break;
          case 77: 
            { return new Symbol(sym.FOR, yycolumn, yyline, yytext());
            }
          case 445: break;
          case 78: 
            { return new Symbol(sym.ERROR_COMENTARIO, yycolumn, yyline, yytext());
            }
          case 446: break;
          case 79: 
            { return new Symbol(sym.BOTH, yycolumn, yyline, yytext());
            }
          case 447: break;
          case 80: 
            { return new Symbol(sym.BULK, yycolumn, yyline, yytext());
            }
          case 448: break;
          case 81: 
            { return new Symbol(sym.SAVE, yycolumn, yyline, yytext());
            }
          case 449: break;
          case 82: 
            { return new Symbol(sym.SOME, yycolumn, yyline, yytext());
            }
          case 450: break;
          case 83: 
            { return new Symbol(sym.SIZE, yycolumn, yyline, yytext());
            }
          case 451: break;
          case 84: 
            { return new Symbol(sym.ONLY, yycolumn, yyline, yytext());
            }
          case 452: break;
          case 85: 
            { return new Symbol(sym.OVER, yycolumn, yyline, yytext());
            }
          case 453: break;
          case 86: 
            { return new Symbol(sym.OPEN, yycolumn, yyline, yytext());
            }
          case 454: break;
          case 87: 
            { return new Symbol(sym.LAST, yycolumn, yyline, yytext());
            }
          case 455: break;
          case 88: 
            { return new Symbol(sym.LOAD, yycolumn, yyline, yytext());
            }
          case 456: break;
          case 89: 
            { return new Symbol(sym.LEFT, yycolumn, yyline, yytext());
            }
          case 457: break;
          case 90: 
            { return new Symbol(sym.LIKE, yycolumn, yyline, yytext());
            }
          case 458: break;
          case 91: 
            { return new Symbol(sym.USER, yycolumn, yyline, yytext());
            }
          case 459: break;
          case 92: 
            { return new Symbol(sym.TIME, yycolumn, yyline, yytext());
            }
          case 460: break;
          case 93: 
            { return new Symbol(sym.TRAN, yycolumn, yyline, yytext());
            }
          case 461: break;
          case 94: 
            { return new Symbol(sym.TRUE, yycolumn, yyline, yytext());
            }
          case 462: break;
          case 95: 
            { return new Symbol(sym.TRIM, yycolumn, yyline, yytext());
            }
          case 463: break;
          case 96: 
            { return new Symbol(sym.THEN, yycolumn, yyline, yytext());
            }
          case 464: break;
          case 97: 
            { return new Symbol(sym.ELSE, yycolumn, yyline, yytext());
            }
          case 465: break;
          case 98: 
            { return new Symbol(sym.EXEC, yycolumn, yyline, yytext());
            }
          case 466: break;
          case 99: 
            { return new Symbol(sym.EXIT, yycolumn, yyline, yytext());
            }
          case 467: break;
          case 100: 
            { return new Symbol(sym.CAST, yycolumn, yyline, yytext());
            }
          case 468: break;
          case 101: 
            { return new Symbol(sym.CASE, yycolumn, yyline, yytext());
            }
          case 469: break;
          case 102: 
            { return new Symbol(sym.CHAR, yycolumn, yyline, yytext());
            }
          case 470: break;
          case 103: 
            { return new Symbol(sym.INTO, yycolumn, yyline, yytext());
            }
          case 471: break;
          case 104: 
            { return new Symbol(sym.NONE, yycolumn, yyline, yytext());
            }
          case 472: break;
          case 105: 
            { return new Symbol(sym.NULL, yycolumn, yyline, yytext());
            }
          case 473: break;
          case 106: 
            { return new Symbol(sym.NEXT, yycolumn, yyline, yytext());
            }
          case 474: break;
          case 107: 
            { return new Symbol(sym.DATE, yycolumn, yyline, yytext());
            }
          case 475: break;
          case 108: 
            { return new Symbol(sym.DBCC, yycolumn, yyline, yytext());
            }
          case 476: break;
          case 109: 
            { return new Symbol(sym.DUMP, yycolumn, yyline, yytext());
            }
          case 477: break;
          case 110: 
            { return new Symbol(sym.DESC, yycolumn, yyline, yytext());
            }
          case 478: break;
          case 111: 
            { return new Symbol(sym.DENY, yycolumn, yyline, yytext());
            }
          case 479: break;
          case 112: 
            { return new Symbol(sym.DISK, yycolumn, yyline, yytext());
            }
          case 480: break;
          case 113: 
            { return new Symbol(sym.DROP, yycolumn, yyline, yytext());
            }
          case 481: break;
          case 114: 
            { return new Symbol(sym.ROWS, yycolumn, yyline, yytext());
            }
          case 482: break;
          case 115: 
            { return new Symbol(sym.RULE, yycolumn, yyline, yytext());
            }
          case 483: break;
          case 116: 
            { return new Symbol(sym.REAL, yycolumn, yyline, yytext());
            }
          case 484: break;
          case 117: 
            { return new Symbol(sym.READ, yycolumn, yyline, yytext());
            }
          case 485: break;
          case 118: 
            { return new Symbol(sym.YEAR, yycolumn, yyline, yytext());
            }
          case 486: break;
          case 119: 
            { return new Symbol(sym.HOUR, yycolumn, yyline, yytext());
            }
          case 487: break;
          case 120: 
            { return new Symbol(sym.ZONE, yycolumn, yyline, yytext());
            }
          case 488: break;
          case 121: 
            { return new Symbol(sym.VIEW, yycolumn, yyline, yytext());
            }
          case 489: break;
          case 122: 
            { return new Symbol(sym.GOTO, yycolumn, yyline, yytext());
            }
          case 490: break;
          case 123: 
            { return new Symbol(sym.KILL, yycolumn, yyline, yytext());
            }
          case 491: break;
          case 124: 
            { return new Symbol(sym.PLAN, yycolumn, yyline, yytext());
            }
          case 492: break;
          case 125: 
            { return new Symbol(sym.PROC, yycolumn, yyline, yytext());
            }
          case 493: break;
          case 126: 
            { return new Symbol(sym.WORK, yycolumn, yyline, yytext());
            }
          case 494: break;
          case 127: 
            { return new Symbol(sym.WITH, yycolumn, yyline, yytext());
            }
          case 495: break;
          case 128: 
            { return new Symbol(sym.WHEN, yycolumn, yyline, yytext());
            }
          case 496: break;
          case 129: 
            { return new Symbol(sym.FULL, yycolumn, yyline, yytext());
            }
          case 497: break;
          case 130: 
            { return new Symbol(sym.FILE, yycolumn, yyline, yytext());
            }
          case 498: break;
          case 131: 
            { return new Symbol(sym.FROM, yycolumn, yyline, yytext());
            }
          case 499: break;
          case 132: 
            { return new Symbol(sym.JOIN, yycolumn, yyline, yytext());
            }
          case 500: break;
          case 133: 
            { return new Symbol(sym.ALTER, yycolumn, yyline, yytext());
            }
          case 501: break;
          case 134: 
            { return new Symbol(sym.BEGIN, yycolumn, yyline, yytext());
            }
          case 502: break;
          case 135: 
            { return new Symbol(sym.BREAK, yycolumn, yyline, yytext());
            }
          case 503: break;
          case 136: 
            { return new Symbol(sym.SPACE, yycolumn, yyline, yytext());
            }
          case 504: break;
          case 137: 
            { return new Symbol(sym.SQLCA, yycolumn, yyline, yytext());
            }
          case 505: break;
          case 138: 
            { return new Symbol(sym.OUTER, yycolumn, yyline, yytext());
            }
          case 506: break;
          case 139: 
            { return new Symbol(sym.ORDER, yycolumn, yyline, yytext());
            }
          case 507: break;
          case 140: 
            { return new Symbol(sym.LOCAL, yycolumn, yyline, yytext());
            }
          case 508: break;
          case 141: 
            { return new Symbol(sym.LOWER, yycolumn, yyline, yytext());
            }
          case 509: break;
          case 142: 
            { return new Symbol(sym.LEVEL, yycolumn, yyline, yytext());
            }
          case 510: break;
          case 143: 
            { return new Symbol(sym.USAGE, yycolumn, yyline, yytext());
            }
          case 511: break;
          case 144: 
            { return new Symbol(sym.USING, yycolumn, yyline, yytext());
            }
          case 512: break;
          case 145: 
            { return new Symbol(sym.UNION, yycolumn, yyline, yytext());
            }
          case 513: break;
          case 146: 
            { return new Symbol(sym.UPPER, yycolumn, yyline, yytext());
            }
          case 514: break;
          case 147: 
            { return new Symbol(sym.TABLE, yycolumn, yyline, yytext());
            }
          case 515: break;
          case 148: 
            { return new Symbol(sym.COUNT, yycolumn, yyline, yytext());
            }
          case 516: break;
          case 149: 
            { return new Symbol(sym.CLOSE, yycolumn, yyline, yytext());
            }
          case 517: break;
          case 150: 
            { return new Symbol(sym.CROSS, yycolumn, yyline, yytext());
            }
          case 518: break;
          case 151: 
            { return new Symbol(sym.CHECK, yycolumn, yyline, yytext());
            }
          case 519: break;
          case 152: 
            { return new Symbol(sym.INNER, yycolumn, yyline, yytext());
            }
          case 520: break;
          case 153: 
            { return new Symbol(sym.INDEX, yycolumn, yyline, yytext());
            }
          case 521: break;
          case 154: 
            { return new Symbol(sym.INPUT, yycolumn, yyline, yytext());
            }
          case 522: break;
          case 155: 
            { return new Symbol(sym.NAMES, yycolumn, yyline, yytext());
            }
          case 523: break;
          case 156: 
            { return new Symbol(sym.NCHAR, yycolumn, yyline, yytext());
            }
          case 524: break;
          case 157: 
            { return new Symbol(sym.RIGHT, yycolumn, yyline, yytext());
            }
          case 525: break;
          case 158: 
            { return new Symbol(sym.VALUE, yycolumn, yyline, yytext());
            }
          case 526: break;
          case 159: 
            { return new Symbol(sym.GRANT, yycolumn, yyline, yytext());
            }
          case 527: break;
          case 160: 
            { return new Symbol(sym.GROUP, yycolumn, yyline, yytext());
            }
          case 528: break;
          case 161: 
            { return new Symbol(sym.PIVOT, yycolumn, yyline, yytext());
            }
          case 529: break;
          case 162: 
            { return new Symbol(sym.PRIOR, yycolumn, yyline, yytext());
            }
          case 530: break;
          case 163: 
            { return new Symbol(sym.PRINT, yycolumn, yyline, yytext());
            }
          case 531: break;
          case 164: 
            { return new Symbol(sym.WRITE, yycolumn, yyline, yytext());
            }
          case 532: break;
          case 165: 
            { return new Symbol(sym.WHERE, yycolumn, yyline, yytext());
            }
          case 533: break;
          case 166: 
            { return new Symbol(sym.WHILE, yycolumn, yyline, yytext());
            }
          case 534: break;
          case 167: 
            { return new Symbol(sym.MATCH, yycolumn, yyline, yytext());
            }
          case 535: break;
          case 168: 
            { return new Symbol(sym.MONTH, yycolumn, yyline, yytext());
            }
          case 536: break;
          case 169: 
            { return new Symbol(sym.MERGE, yycolumn, yyline, yytext());
            }
          case 537: break;
          case 170: 
            { return new Symbol(sym.FALSE, yycolumn, yyline, yytext());
            }
          case 538: break;
          case 171: 
            { return new Symbol(sym.FOUND, yycolumn, yyline, yytext());
            }
          case 539: break;
          case 172: 
            { return new Symbol(sym.FLOAT, yycolumn, yyline, yytext());
            }
          case 540: break;
          case 173: 
            { return new Symbol(sym.FETCH, yycolumn, yyline, yytext());
            }
          case 541: break;
          case 174: 
            { return new Symbol(sym.FIRST, yycolumn, yyline, yytext());
            }
          case 542: break;
          case 175: 
            { return new Symbol(sym.ACTION, yycolumn, yyline, yytext());
            }
          case 543: break;
          case 176: 
            { return new Symbol(sym.BACKUP, yycolumn, yyline, yytext());
            }
          case 544: break;
          case 177: 
            { return new Symbol(sym.BROWSE, yycolumn, yyline, yytext());
            }
          case 545: break;
          case 178: 
            { return new Symbol(sym.STATIC, yycolumn, yyline, yytext());
            }
          case 546: break;
          case 179: 
            { return new Symbol(sym.SELECT, yycolumn, yyline, yytext());
            }
          case 547: break;
          case 180: 
            { return new Symbol(sym.SECOND, yycolumn, yyline, yytext());
            }
          case 548: break;
          case 181: 
            { return new Symbol(sym.SCROLL, yycolumn, yyline, yytext());
            }
          case 549: break;
          case 182: 
            { return new Symbol(sym.SCHEMA, yycolumn, yyline, yytext());
            }
          case 550: break;
          case 183: 
            { return new Symbol(sym.OUTPUT, yycolumn, yyline, yytext());
            }
          case 551: break;
          case 184: 
            { return new Symbol(sym.OPTION, yycolumn, yyline, yytext());
            }
          case 552: break;
          case 185: 
            { return new Symbol(sym.LINENO, yycolumn, yyline, yytext());
            }
          case 553: break;
          case 186: 
            { return new Symbol(sym.UNIQUE, yycolumn, yyline, yytext());
            }
          case 554: break;
          case 187: 
            { return new Symbol(sym.UPDATE, yycolumn, yyline, yytext());
            }
          case 555: break;
          case 188: 
            { return new Symbol(sym.ESCAPE, yycolumn, yyline, yytext());
            }
          case 556: break;
          case 189: 
            { return new Symbol(sym.ERRLVL, yycolumn, yyline, yytext());
            }
          case 557: break;
          case 190: 
            { return new Symbol(sym.EXCEPT, yycolumn, yyline, yytext());
            }
          case 558: break;
          case 191: 
            { return new Symbol(sym.EXISTS, yycolumn, yyline, yytext());
            }
          case 559: break;
          case 192: 
            { return new Symbol(sym.COLUMN, yycolumn, yyline, yytext());
            }
          case 560: break;
          case 193: 
            { return new Symbol(sym.COMMIT, yycolumn, yyline, yytext());
            }
          case 561: break;
          case 194: 
            { return new Symbol(sym.CURSOR, yycolumn, yyline, yytext());
            }
          case 562: break;
          case 195: 
            { return new Symbol(sym.CREATE, yycolumn, yyline, yytext());
            }
          case 563: break;
          case 196: 
            { return new Symbol(sym.INSERT, yycolumn, yyline, yytext());
            }
          case 564: break;
          case 197: 
            { return new Symbol(sym.NULLIF, yycolumn, yyline, yytext());
            }
          case 565: break;
          case 198: 
            { return new Symbol(sym.DOUBLE, yycolumn, yyline, yytext());
            }
          case 566: break;
          case 199: 
            { return new Symbol(sym.DOMAIN, yycolumn, yyline, yytext());
            }
          case 567: break;
          case 200: 
            { return new Symbol(sym.DELETE, yycolumn, yyline, yytext());
            }
          case 568: break;
          case 201: 
            { return new Symbol(sym.RETURN, yycolumn, yyline, yytext());
            }
          case 569: break;
          case 202: 
            { return new Symbol(sym.REVOKE, yycolumn, yyline, yytext());
            }
          case 570: break;
          case 203: 
            { return new Symbol(sym.REVERT, yycolumn, yyline, yytext());
            }
          case 571: break;
          case 204: 
            { return new Symbol(sym.HAVING, yycolumn, yyline, yytext());
            }
          case 572: break;
          case 205: 
            { return new Symbol(sym.VALUES, yycolumn, yyline, yytext());
            }
          case 573: break;
          case 206: 
            { return new Symbol(sym.GLOBAL, yycolumn, yyline, yytext());
            }
          case 574: break;
          case 207: 
            { return new Symbol(sym.KEYSET, yycolumn, yyline, yytext());
            }
          case 575: break;
          case 208: 
            { return new Symbol(sym.PASCAL, yycolumn, yyline, yytext());
            }
          case 576: break;
          case 209: 
            { return new Symbol(sym.PUBLIC, yycolumn, yyline, yytext());
            }
          case 577: break;
          case 210: 
            { return new Symbol(sym.MODULE, yycolumn, yyline, yytext());
            }
          case 578: break;
          case 211: 
            { return new Symbol(sym.MINUTE, yycolumn, yyline, yytext());
            }
          case 579: break;
          case 212: 
            { return new Symbol(sym.BETWEEN, yycolumn, yyline, yytext());
            }
          case 580: break;
          case 213: 
            { return new Symbol(sym.SESSION, yycolumn, yyline, yytext());
            }
          case 581: break;
          case 214: 
            { return new Symbol(sym.SETUSER, yycolumn, yyline, yytext());
            }
          case 582: break;
          case 215: 
            { return new Symbol(sym.SECTION, yycolumn, yyline, yytext());
            }
          case 583: break;
          case 216: 
            { return new Symbol(sym.SQLCODE, yycolumn, yyline, yytext());
            }
          case 584: break;
          case 217: 
            { return new Symbol(sym.OPENXML, yycolumn, yyline, yytext());
            }
          case 585: break;
          case 218: 
            { return new Symbol(sym.OFFSETS, yycolumn, yyline, yytext());
            }
          case 586: break;
          case 219: 
            { return new Symbol(sym.LEADING, yycolumn, yyline, yytext());
            }
          case 587: break;
          case 220: 
            { return new Symbol(sym.UNKNOWN, yycolumn, yyline, yytext());
            }
          case 588: break;
          case 221: 
            { return new Symbol(sym.UNPIVOT, yycolumn, yyline, yytext());
            }
          case 589: break;
          case 222: 
            { return new Symbol(sym.TSEQUAL, yycolumn, yyline, yytext());
            }
          case 590: break;
          case 223: 
            { return new Symbol(sym.TRIGGER, yycolumn, yyline, yytext());
            }
          case 591: break;
          case 224: 
            { return new Symbol(sym.EXTRACT, yycolumn, yyline, yytext());
            }
          case 592: break;
          case 225: 
            { return new Symbol(sym.EXECUTE, yycolumn, yyline, yytext());
            }
          case 593: break;
          case 226: 
            { return new Symbol(sym.CASCADE, yycolumn, yyline, yytext());
            }
          case 594: break;
          case 227: 
            { return new Symbol(sym.CATALOG, yycolumn, yyline, yytext());
            }
          case 595: break;
          case 228: 
            { return new Symbol(sym.COLLATE, yycolumn, yyline, yytext());
            }
          case 596: break;
          case 229: 
            { return new Symbol(sym.CONNECT, yycolumn, yyline, yytext());
            }
          case 597: break;
          case 230: 
            { return new Symbol(sym.CONVERT, yycolumn, yyline, yytext());
            }
          case 598: break;
          case 231: 
            { return new Symbol(sym.COMPUTE, yycolumn, yyline, yytext());
            }
          case 599: break;
          case 232: 
            { return new Symbol(sym.CURRENT, yycolumn, yyline, yytext());
            }
          case 600: break;
          case 233: 
            { return new Symbol(sym.INTEGER, yycolumn, yyline, yytext());
            }
          case 601: break;
          case 234: 
            { return new Symbol(sym.INCLUDE, yycolumn, yyline, yytext());
            }
          case 602: break;
          case 235: 
            { return new Symbol(sym.NATURAL, yycolumn, yyline, yytext());
            }
          case 603: break;
          case 236: 
            { return new Symbol(sym.NOCHECK, yycolumn, yyline, yytext());
            }
          case 604: break;
          case 237: 
            { return new Symbol(sym.NUMERIC, yycolumn, yyline, yytext());
            }
          case 605: break;
          case 238: 
            { return new Symbol(sym.DECLARE, yycolumn, yyline, yytext());
            }
          case 606: break;
          case 239: 
            { return new Symbol(sym.DECIMAL, yycolumn, yyline, yytext());
            }
          case 607: break;
          case 240: 
            { return new Symbol(sym.DEFAULT, yycolumn, yyline, yytext());
            }
          case 608: break;
          case 241: 
            { return new Symbol(sym.DYNAMIC, yycolumn, yyline, yytext());
            }
          case 609: break;
          case 242: 
            { return new Symbol(sym.RESTORE, yycolumn, yyline, yytext());
            }
          case 610: break;
          case 243: 
            { return new Symbol(sym.RETURNS, yycolumn, yyline, yytext());
            }
          case 611: break;
          case 244: 
            { return new Symbol(sym.VARCHAR, yycolumn, yyline, yytext());
            }
          case 612: break;
          case 245: 
            { return new Symbol(sym.VARYING, yycolumn, yyline, yytext());
            }
          case 613: break;
          case 246: 
            { return new Symbol(sym.PARTIAL, yycolumn, yyline, yytext());
            }
          case 614: break;
          case 247: 
            { return new Symbol(sym.PERCENT, yycolumn, yyline, yytext());
            }
          case 615: break;
          case 248: 
            { return new Symbol(sym.PREPARE, yycolumn, yyline, yytext());
            }
          case 616: break;
          case 249: 
            { return new Symbol(sym.PRIMARY, yycolumn, yyline, yytext());
            }
          case 617: break;
          case 250: 
            { return new Symbol(sym.WAITFOR, yycolumn, yyline, yytext());
            }
          case 618: break;
          case 251: 
            { return new Symbol(sym.FORTRAN, yycolumn, yyline, yytext());
            }
          case 619: break;
          case 252: 
            { return new Symbol(sym.FOREIGN, yycolumn, yyline, yytext());
            }
          case 620: break;
          case 253: 
            { return new Symbol(sym.ABSOLUTE, yycolumn, yyline, yytext());
            }
          case 621: break;
          case 254: 
            { return new Symbol(sym.ALLOCATE, yycolumn, yyline, yytext());
            }
          case 622: break;
          case 255: 
            { return new Symbol(sym.SHUTDOWN, yycolumn, yyline, yytext());
            }
          case 623: break;
          case 256: 
            { return new Symbol(sym.SMALLINT, yycolumn, yyline, yytext());
            }
          case 624: break;
          case 257: 
            { return new Symbol(sym.SQLSTATE, yycolumn, yyline, yytext());
            }
          case 625: break;
          case 258: 
            { return new Symbol(sym.SQLERROR, yycolumn, yyline, yytext());
            }
          case 626: break;
          case 259: 
            { return new Symbol(sym.OVERLAPS, yycolumn, yyline, yytext());
            }
          case 627: break;
          case 260: 
            { return new Symbol(sym.LANGUAGE, yycolumn, yyline, yytext());
            }
          case 628: break;
          case 261: 
            { return new Symbol(sym.TEXTSIZE, yycolumn, yyline, yytext());
            }
          case 629: break;
          case 262: 
            { return new Symbol(sym.TRAILING, yycolumn, yyline, yytext());
            }
          case 630: break;
          case 263: 
            { return new Symbol(sym.TRUNCATE, yycolumn, yyline, yytext());
            }
          case 631: break;
          case 264: 
            { return new Symbol(sym.END_EXEC, yycolumn, yyline, yytext());
            }
          case 632: break;
          case 265: 
            { return new Symbol(sym.EXTERNAL, yycolumn, yyline, yytext());
            }
          case 633: break;
          case 266: 
            { return new Symbol(sym.CASCADED, yycolumn, yyline, yytext());
            }
          case 634: break;
          case 267: 
            { return new Symbol(sym.COALESCE, yycolumn, yyline, yytext());
            }
          case 635: break;
          case 268: 
            { return new Symbol(sym.CONTAINS, yycolumn, yyline, yytext());
            }
          case 636: break;
          case 269: 
            { return new Symbol(sym.CONTINUE, yycolumn, yyline, yytext());
            }
          case 637: break;
          case 270: 
            { return new Symbol(sym.INTERVAL, yycolumn, yyline, yytext());
            }
          case 638: break;
          case 271: 
            { return new Symbol(sym.IDENTITY, yycolumn, yyline, yytext());
            }
          case 639: break;
          case 272: 
            { return new Symbol(sym.NATIONAL, yycolumn, yyline, yytext());
            }
          case 640: break;
          case 273: 
            { return new Symbol(sym.DATABASE, yycolumn, yyline, yytext());
            }
          case 641: break;
          case 274: 
            { return new Symbol(sym.DESCRIBE, yycolumn, yyline, yytext());
            }
          case 642: break;
          case 275: 
            { return new Symbol(sym.DEFERRED, yycolumn, yyline, yytext());
            }
          case 643: break;
          case 276: 
            { return new Symbol(sym.DISTINCT, yycolumn, yyline, yytext());
            }
          case 644: break;
          case 277: 
            { return new Symbol(sym.ROLLBACK, yycolumn, yyline, yytext());
            }
          case 645: break;
          case 278: 
            { return new Symbol(sym.ROWCOUNT, yycolumn, yyline, yytext());
            }
          case 646: break;
          case 279: 
            { return new Symbol(sym.READTEXT, yycolumn, yyline, yytext());
            }
          case 647: break;
          case 280: 
            { return new Symbol(sym.RESTRICT, yycolumn, yyline, yytext());
            }
          case 648: break;
          case 281: 
            { return new Symbol(sym.RELATIVE, yycolumn, yyline, yytext());
            }
          case 649: break;
          case 282: 
            { return new Symbol(sym.HOLDLOCK, yycolumn, yyline, yytext());
            }
          case 650: break;
          case 283: 
            { return new Symbol(sym.VARIYING, yycolumn, yyline, yytext());
            }
          case 651: break;
          case 284: 
            { return new Symbol(sym.POSITION, yycolumn, yyline, yytext());
            }
          case 652: break;
          case 285: 
            { return new Symbol(sym.PRESERVE, yycolumn, yyline, yytext());
            }
          case 653: break;
          case 286: 
            { return new Symbol(sym.WHENEVER, yycolumn, yyline, yytext());
            }
          case 654: break;
          case 287: 
            { return new Symbol(sym.FUNCTION, yycolumn, yyline, yytext());
            }
          case 655: break;
          case 288: 
            { return new Symbol(sym.FREETEXT, yycolumn, yyline, yytext());
            }
          case 656: break;
          case 289: 
            { return new Symbol(sym.ASSERTION, yycolumn, yyline, yytext());
            }
          case 657: break;
          case 290: 
            { return new Symbol(sym.SUBSTRING, yycolumn, yyline, yytext());
            }
          case 658: break;
          case 291: 
            { return new Symbol(sym.OPENQUERY, yycolumn, yyline, yytext());
            }
          case 659: break;
          case 292: 
            { return new Symbol(sym.TEMPORARY, yycolumn, yyline, yytext());
            }
          case 660: break;
          case 293: 
            { return new Symbol(sym.TIMESTAMP, yycolumn, yyline, yytext());
            }
          case 661: break;
          case 294: 
            { return new Symbol(sym.TRANSLATE, yycolumn, yyline, yytext());
            }
          case 662: break;
          case 295: 
            { return new Symbol(sym.EXCEPTION, yycolumn, yyline, yytext());
            }
          case 663: break;
          case 296: 
            { return new Symbol(sym.COLLATION, yycolumn, yyline, yytext());
            }
          case 664: break;
          case 297: 
            { return new Symbol(sym.CLUSTERED, yycolumn, yyline, yytext());
            }
          case 665: break;
          case 298: 
            { return new Symbol(sym.CHARACTER, yycolumn, yyline, yytext());
            }
          case 666: break;
          case 299: 
            { return new Symbol(sym.ISOLATION, yycolumn, yyline, yytext());
            }
          case 667: break;
          case 300: 
            { return new Symbol(sym.INTERSECT, yycolumn, yyline, yytext());
            }
          case 668: break;
          case 301: 
            { return new Symbol(sym.INITIALLY, yycolumn, yyline, yytext());
            }
          case 669: break;
          case 302: 
            { return new Symbol(sym.INDICATOR, yycolumn, yyline, yytext());
            }
          case 670: break;
          case 303: 
            { return new Symbol(sym.IMMEDIATE, yycolumn, yyline, yytext());
            }
          case 671: break;
          case 304: 
            { return new Symbol(sym.RAISERROR, yycolumn, yyline, yytext());
            }
          case 672: break;
          case 305: 
            { return new Symbol(sym.READ_ONLY, yycolumn, yyline, yytext());
            }
          case 673: break;
          case 306: 
            { return new Symbol(sym.RECOMPILE, yycolumn, yyline, yytext());
            }
          case 674: break;
          case 307: 
            { return new Symbol(sym.PROCEDURE, yycolumn, yyline, yytext());
            }
          case 675: break;
          case 308: 
            { return new Symbol(sym.PRECISION, yycolumn, yyline, yytext());
            }
          case 676: break;
          case 309: 
            { return new Symbol(sym.WRITETEXT, yycolumn, yyline, yytext());
            }
          case 677: break;
          case 310: 
            { return new Symbol(sym.BIT_LENGTH, yycolumn, yyline, yytext());
            }
          case 678: break;
          case 311: 
            { return new Symbol(sym.STATISTICS, yycolumn, yyline, yytext());
            }
          case 679: break;
          case 312: 
            { return new Symbol(sym.SQLWARNING, yycolumn, yyline, yytext());
            }
          case 680: break;
          case 313: 
            { return new Symbol(sym.OPTIMISTIC, yycolumn, yyline, yytext());
            }
          case 681: break;
          case 314: 
            { return new Symbol(sym.OPENROWSET, yycolumn, yyline, yytext());
            }
          case 682: break;
          case 315: 
            { return new Symbol(sym.UPDATETEXT, yycolumn, yyline, yytext());
            }
          case 683: break;
          case 316: 
            { return new Symbol(sym.ENCRYPTION, yycolumn, yyline, yytext());
            }
          case 684: break;
          case 317: 
            { return new Symbol(sym.CONSTRAINT, yycolumn, yyline, yytext());
            }
          case 685: break;
          case 318: 
            { return new Symbol(sym.CONNECTION, yycolumn, yyline, yytext());
            }
          case 686: break;
          case 319: 
            { return new Symbol(sym.CHECKPOINT, yycolumn, yyline, yytext());
            }
          case 687: break;
          case 320: 
            { return new Symbol(sym.DEALLOCATE, yycolumn, yyline, yytext());
            }
          case 688: break;
          case 321: 
            { return new Symbol(sym.DESCRIPTOR, yycolumn, yyline, yytext());
            }
          case 689: break;
          case 322: 
            { return new Symbol(sym.DEFERRABLE, yycolumn, yyline, yytext());
            }
          case 690: break;
          case 323: 
            { return new Symbol(sym.DISCONNECT, yycolumn, yyline, yytext());
            }
          case 691: break;
          case 324: 
            { return new Symbol(sym.ROWGUIDCOL, yycolumn, yyline, yytext());
            }
          case 692: break;
          case 325: 
            { return new Symbol(sym.REFERENCES, yycolumn, yyline, yytext());
            }
          case 693: break;
          case 326: 
            { return new Symbol(sym.PRIVILEGES, yycolumn, yyline, yytext());
            }
          case 694: break;
          case 327: 
            { return new Symbol(sym.FILLFACTOR, yycolumn, yyline, yytext());
            }
          case 695: break;
          case 328: 
            { return new Symbol(sym.SYSTEM_USER, yycolumn, yyline, yytext());
            }
          case 696: break;
          case 329: 
            { return new Symbol(sym.TABLESAMPLE, yycolumn, yyline, yytext());
            }
          case 697: break;
          case 330: 
            { return new Symbol(sym.TRANSACTION, yycolumn, yyline, yytext());
            }
          case 698: break;
          case 331: 
            { return new Symbol(sym.TRANSLATION, yycolumn, yyline, yytext());
            }
          case 699: break;
          case 332: 
            { return new Symbol(sym.TRY_CONVERT, yycolumn, yyline, yytext());
            }
          case 700: break;
          case 333: 
            { return new Symbol(sym.CONSTRAINTS, yycolumn, yyline, yytext());
            }
          case 701: break;
          case 334: 
            { return new Symbol(sym.CHAR_LENGTH, yycolumn, yyline, yytext());
            }
          case 702: break;
          case 335: 
            { return new Symbol(sym.INSENSITIVE, yycolumn, yyline, yytext());
            }
          case 703: break;
          case 336: 
            { return new Symbol(sym.IDENTITYCOL, yycolumn, yyline, yytext());
            }
          case 704: break;
          case 337: 
            { return new Symbol(sym.NOCLUSTERED, yycolumn, yyline, yytext());
            }
          case 705: break;
          case 338: 
            { return new Symbol(sym.DIAGNOSTICS, yycolumn, yyline, yytext());
            }
          case 706: break;
          case 339: 
            { return new Symbol(sym.DISTRIBUTED, yycolumn, yyline, yytext());
            }
          case 707: break;
          case 340: 
            { return new Symbol(sym.RECONFIGURE, yycolumn, yyline, yytext());
            }
          case 708: break;
          case 341: 
            { return new Symbol(sym.REPLICATION, yycolumn, yyline, yytext());
            }
          case 709: break;
          case 342: 
            { return new Symbol(sym.SESSION_USER, yycolumn, yyline, yytext());
            }
          case 710: break;
          case 343: 
            { return new Symbol(sym.SCROLL_LOCKS, yycolumn, yyline, yytext());
            }
          case 711: break;
          case 344: 
            { return new Symbol(sym.OCTET_LENGTH, yycolumn, yyline, yytext());
            }
          case 712: break;
          case 345: 
            { return new Symbol(sym.TYPE_WARNING, yycolumn, yyline, yytext());
            }
          case 713: break;
          case 346: 
            { return new Symbol(sym.CURRENT_USER, yycolumn, yyline, yytext());
            }
          case 714: break;
          case 347: 
            { return new Symbol(sym.CURRENT_TIME, yycolumn, yyline, yytext());
            }
          case 715: break;
          case 348: 
            { return new Symbol(sym.CURRENT_DATE, yycolumn, yyline, yytext());
            }
          case 716: break;
          case 349: 
            { return new Symbol(sym.NONCLUSTERED, yycolumn, yyline, yytext());
            }
          case 717: break;
          case 350: 
            { return new Symbol(sym.WITHIN_GROUP, yycolumn, yyline, yytext());
            }
          case 718: break;
          case 351: 
            { return new Symbol(sym.FAST_FORWARD, yycolumn, yyline, yytext());
            }
          case 719: break;
          case 352: 
            { return new Symbol(sym.FORWARD_ONLY, yycolumn, yyline, yytext());
            }
          case 720: break;
          case 353: 
            { return new Symbol(sym.AUTHORIZATION, yycolumn, yyline, yytext());
            }
          case 721: break;
          case 354: 
            { return new Symbol(sym.SECURITYAUDIT, yycolumn, yyline, yytext());
            }
          case 722: break;
          case 355: 
            { return new Symbol(sym.TIMEZONE_HOUR, yycolumn, yyline, yytext());
            }
          case 723: break;
          case 356: 
            { return new Symbol(sym.CONTAINSTABLE, yycolumn, yyline, yytext());
            }
          case 724: break;
          case 357: 
            { return new Symbol(sym.CORRESPONDING, yycolumn, yyline, yytext());
            }
          case 725: break;
          case 358: 
            { return new Symbol(sym.FREETEXTTABLE, yycolumn, yyline, yytext());
            }
          case 726: break;
          case 359: 
            { return new Symbol(sym.OPENDATASOURCE, yycolumn, yyline, yytext());
            }
          case 727: break;
          case 360: 
            { return new Symbol(sym.TIMEZONE_MINUTE, yycolumn, yyline, yytext());
            }
          case 728: break;
          case 361: 
            { return new Symbol(sym.IDENTITY_INSERT, yycolumn, yyline, yytext());
            }
          case 729: break;
          case 362: 
            { return new Symbol(sym.CHARACTER_LENGTH, yycolumn, yyline, yytext());
            }
          case 730: break;
          case 363: 
            { return new Symbol(sym.CURRENT_TIMESTAMP, yycolumn, yyline, yytext());
            }
          case 731: break;
          case 364: 
            { return new Symbol(sym.DELAYED_DURABILITY, yycolumn, yyline, yytext());
            }
          case 732: break;
          case 365: 
            { return new Symbol(sym.SEMANTICKEYPHRASETABLE, yycolumn, yyline, yytext());
            }
          case 733: break;
          case 366: 
            { return new Symbol(sym.SEMANTICSIMILARITYTABLE, yycolumn, yyline, yytext());
            }
          case 734: break;
          case 367: 
            { return new Symbol(sym.SEMANTICSIMILARITYDETAIL, yycolumn, yyline, yytext());
            }
          case 735: break;
          case 368: 
            { return new Symbol(sym.SEMANTICSIMILARITYDETAILSTABLE, yycolumn, yyline, yytext());
            }
          case 736: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
