/* The following code was generated by JFlex 1.6.1 */

package Proyecto;
import static Proyecto.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/Users/jpbalan/Documents/NetBeansProjects/Compiladores/Compiladores/src/Proyecto/F1_MiniSQL.flex</tt>
 */
class F1_MiniSQL {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\56\1\75\1\75\1\57\22\0\1\35\1\64\1\55"+
    "\2\0\1\63\1\66\1\0\1\71\1\72\1\62\1\54\1\63\1\31"+
    "\1\53\1\61\1\50\11\37\1\0\1\63\1\64\1\65\1\64\2\0"+
    "\1\1\1\2\1\11\1\14\1\10\1\30\1\22\1\17\1\12\1\33"+
    "\1\23\1\5\1\27\1\13\1\4\1\24\1\34\1\15\1\3\1\7"+
    "\1\6\1\21\1\25\1\32\1\16\1\20\1\67\1\0\1\70\1\0"+
    "\1\26\1\0\1\45\3\52\1\43\1\44\5\36\1\46\5\36\1\41"+
    "\1\47\1\40\1\42\2\36\1\51\2\36\1\73\1\60\1\74\7\0"+
    "\1\75\33\0\1\0\6\0\1\0\13\0\1\0\12\0\1\0\u1f68\0"+
    "\1\75\1\75\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\27\2\1\3\2\2\1\4\1\5\2\2"+
    "\1\5\2\1\2\3\1\1\3\3\1\2\1\6\2\2"+
    "\1\6\31\2\2\6\2\2\1\6\11\2\1\6\17\2"+
    "\2\6\3\2\1\6\25\2\1\6\35\2\1\0\1\7"+
    "\2\2\2\0\1\10\2\0\2\2\1\6\7\2\1\6"+
    "\6\2\1\6\10\2\1\6\4\2\1\6\7\2\1\6"+
    "\20\2\1\6\25\2\1\6\24\2\1\6\50\2\1\6"+
    "\1\2\1\6\6\2\1\0\1\7\1\0\2\2\1\11"+
    "\1\0\1\1\1\0\27\2\2\6\11\2\1\6\1\2"+
    "\1\6\3\2\1\0\26\2\1\6\16\2\1\6\3\2"+
    "\1\6\13\2\1\6\15\2\1\6\5\2\1\6\1\2"+
    "\1\6\4\2\1\0\1\7\1\12\1\0\25\2\1\6"+
    "\6\2\1\0\16\2\1\6\35\2\1\6\32\2\1\0"+
    "\1\6\34\2\1\6\10\2\1\0\1\6\4\2\1\6"+
    "\10\2\1\0\10\2\1\6\1\2\1\6\3\2\1\6"+
    "\2\2\1\0\11\2\1\0\10\2\1\0\7\2\1\0"+
    "\2\2\1\6\21\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[670];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\76\0\u060e\0\u064c\0\76\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6"+
    "\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u060e\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078"+
    "\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268"+
    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838"+
    "\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28"+
    "\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18"+
    "\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8"+
    "\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8"+
    "\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\u2682\0\u0782\0\u0782\0\u26c0\0\u26fe\0\u273c"+
    "\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c"+
    "\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c"+
    "\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c"+
    "\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec"+
    "\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc"+
    "\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc"+
    "\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc"+
    "\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac"+
    "\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c"+
    "\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c"+
    "\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u13dc\0\u3e3e"+
    "\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e"+
    "\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e"+
    "\0\u425c\0\u429a\0\u30ae\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0"+
    "\0\u440e\0\u444c\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0"+
    "\0\u45fe\0\u463c\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0"+
    "\0\u47ee\0\u482c\0\u486a\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0"+
    "\0\u49de\0\u4a1c\0\u4a5a\0\u4a98\0\u4ad6\0\u4ad6\0\u4b14\0\u4b52"+
    "\0\u4b90\0\u2682\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04"+
    "\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78\0\u4eb6\0\u4ef4"+
    "\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u5068\0\u50a6\0\u50e4"+
    "\0\u5122\0\u5160\0\u519e\0\u51dc\0\u521a\0\u5258\0\u5296\0\u52d4"+
    "\0\u5312\0\u5350\0\u538e\0\u53cc\0\u540a\0\u5448\0\u5486\0\u54c4"+
    "\0\u5502\0\u5540\0\u557e\0\u55bc\0\u55fa\0\u5638\0\u5676\0\u56b4"+
    "\0\u56f2\0\u5730\0\u576e\0\u57ac\0\u57ea\0\u5828\0\u5866\0\u58a4"+
    "\0\u58e2\0\u5920\0\u595e\0\u599c\0\u59da\0\u48a8\0\u5a18\0\u5a56"+
    "\0\u5a94\0\u5ad2\0\u5b10\0\u5b4e\0\u5b8c\0\u5bca\0\u5c08\0\u5c46"+
    "\0\u5c84\0\u5cc2\0\u5d00\0\u5d3e\0\u5d7c\0\u5dba\0\u5df8\0\u5e36"+
    "\0\u5e74\0\u5eb2\0\u5ef0\0\u5f2e\0\u5f6c\0\u5faa\0\u5fe8\0\u6026"+
    "\0\u6064\0\u60a2\0\u60e0\0\u611e\0\u615c\0\u619a\0\u61d8\0\u6216"+
    "\0\u6254\0\u6292\0\u62d0\0\u630e\0\u634c\0\u638a\0\u63c8\0\u6406"+
    "\0\u6444\0\u6482\0\u64c0\0\u64fe\0\u653c\0\u657a\0\u65b8\0\u65f6"+
    "\0\u6634\0\u6672\0\u66b0\0\u66ee\0\u672c\0\u676a\0\u67a8\0\u67e6"+
    "\0\u6824\0\u6862\0\u68a0\0\u68de\0\u691c\0\u695a\0\u6998\0\u69d6"+
    "\0\u060e\0\u6a14\0\u6a52\0\u6a90\0\u6ace\0\u6b0c\0\u6b4a\0\u6b88"+
    "\0\u6bc6\0\u6c04\0\u6c42\0\u6c80\0\u6cbe\0\u6cfc\0\u6d3a\0\u29a8"+
    "\0\u6d78\0\u6db6\0\u6df4\0\u6e32\0\u6e70\0\u6eae\0\u6eec\0\u6f2a"+
    "\0\u6f68\0\u6fa6\0\u6fe4\0\u7022\0\u7060\0\u709e\0\u70dc\0\u711a"+
    "\0\u7158\0\u7196\0\u71d4\0\u7212\0\u7250\0\u728e\0\u72cc\0\u730a"+
    "\0\u7348\0\u7386\0\u73c4\0\u7402\0\u7440\0\u747e\0\u74bc\0\u74fa"+
    "\0\u7538\0\u7576\0\u75b4\0\u75f2\0\u7630\0\u766e\0\u76ac\0\u76ea"+
    "\0\u27b8\0\u7728\0\u7766\0\u77a4\0\u77e2\0\u7820\0\u785e\0\u789c"+
    "\0\u78da\0\u7918\0\u7956\0\u7994\0\u79d2\0\u7a10\0\u7a4e\0\u7a8c"+
    "\0\u7aca\0\u7b08\0\u7b46\0\u5b10\0\u7b84\0\u7bc2\0\u7c00\0\u7c3e"+
    "\0\u7c7c\0\u7cba\0\u7cf8\0\u7d36\0\u7d74\0\u7db2\0\u7df0\0\u7e2e"+
    "\0\u7e6c\0\u7eaa\0\u7ee8\0\u7f26\0\u7f64\0\u7fa2\0\u7fe0\0\u801e"+
    "\0\u805c\0\u809a\0\u80d8\0\u8116\0\u8154\0\u8192\0\u81d0\0\u2872"+
    "\0\u820e\0\u824c\0\u828a\0\u82c8\0\u8306\0\u8344\0\u8382\0\u83c0"+
    "\0\u83fe\0\u843c\0\u847a\0\u84b8\0\u84f6\0\u8534\0\u8572\0\u85b0"+
    "\0\u85ee\0\u862c\0\u866a\0\u86a8\0\u86e6\0\u8724\0\u8762\0\u87a0"+
    "\0\u87de\0\u881c\0\u885a\0\u8898\0\u7f64\0\u88d6\0\u8914\0\u2b5a"+
    "\0\u8952\0\u8990\0\u89ce\0\u8a0c\0\u8a4a\0\u8a88\0\u2f3a\0\u8ac6"+
    "\0\u8b04\0\u8b42\0\u8b80\0\u8bbe\0\u8bfc\0\u1078\0\u8c3a\0\u8c78"+
    "\0\u8cb6\0\u8cf4\0\u8d32\0\u8d70\0\u8dae\0\u8dec\0\u8e2a\0\u8e68"+
    "\0\u8ea6\0\u8ee4\0\u8f22\0\u8f60\0\u8f9e\0\76\0\u8fdc\0\u901a"+
    "\0\u9058\0\u9096\0\u90d4\0\u9112\0\u9150\0\u918e\0\u91cc\0\u920a"+
    "\0\u9248\0\u9286\0\u92c4\0\u9302\0\u9340\0\u937e\0\u93bc\0\u93fa"+
    "\0\u9438\0\u9476\0\u94b4\0\u94f2\0\u9530\0\u956e\0\u95ac\0\u95ea"+
    "\0\u9628\0\u9666\0\u96a4\0\u96e2\0\u9720\0\u975e\0\u979c\0\u97da"+
    "\0\u9818\0\u9856\0\u9894\0\u98d2\0\u9910\0\u994e\0\u998c\0\u99ca"+
    "\0\u9a08\0\u9a46\0\u9a84\0\u9ac2\0\u9b00\0\u9b3e\0\u901a\0\u9b7c"+
    "\0\u9bba\0\u9bf8\0\u9c36\0\u9c74\0\u9cb2\0\u9cf0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[670];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\30"+
    "\1\31\1\32\1\33\1\34\1\33\1\35\1\33\1\36"+
    "\1\37\3\33\1\40\3\33\1\41\2\33\2\32\1\42"+
    "\2\35\1\43\1\44\2\32\2\45\1\46\1\47\1\32"+
    "\1\50\1\32\1\51\1\32\100\0\1\33\1\52\1\53"+
    "\1\33\1\54\1\55\1\56\1\33\1\57\1\33\1\60"+
    "\1\61\1\62\3\33\1\63\7\33\1\0\3\33\1\0"+
    "\15\33\24\0\1\64\2\33\1\65\1\33\1\66\1\33"+
    "\1\67\1\33\1\70\2\33\1\71\1\56\12\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\72\2\33\1\73\1\33"+
    "\1\74\1\75\1\76\1\77\1\100\3\33\1\101\1\102"+
    "\4\33\1\103\2\33\1\104\1\33\1\0\2\33\1\105"+
    "\1\0\15\33\24\0\5\33\1\106\2\33\1\107\1\33"+
    "\1\110\1\33\1\111\3\33\1\112\2\33\1\113\3\33"+
    "\1\114\1\0\3\33\1\0\15\33\24\0\1\115\2\33"+
    "\1\116\3\33\1\117\1\33\1\120\16\33\1\0\3\33"+
    "\1\0\15\33\24\0\2\33\1\121\7\33\1\122\10\33"+
    "\1\123\4\33\1\0\3\33\1\0\15\33\24\0\1\124"+
    "\1\33\1\125\1\126\3\33\1\127\1\33\1\130\2\33"+
    "\1\131\1\33\1\132\11\33\1\0\3\33\1\0\15\33"+
    "\24\0\2\33\1\133\1\33\1\134\5\33\1\135\1\33"+
    "\1\136\13\33\1\0\1\137\2\33\1\0\15\33\24\0"+
    "\1\140\2\33\1\141\1\142\1\143\6\33\1\144\1\33"+
    "\1\145\11\33\1\0\3\33\1\0\15\33\24\0\2\33"+
    "\1\146\7\33\1\147\1\150\12\33\1\151\1\56\1\0"+
    "\3\33\1\0\15\33\24\0\1\152\2\33\1\153\1\33"+
    "\1\154\1\33\1\155\1\156\17\33\1\0\3\33\1\0"+
    "\15\33\24\0\1\157\1\160\1\33\1\161\1\33\1\162"+
    "\1\33\1\163\1\33\1\164\2\33\1\165\13\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\166\2\33\1\167\1\33"+
    "\1\170\1\33\1\171\1\33\1\172\16\33\1\0\3\33"+
    "\1\0\15\33\24\0\7\33\1\173\20\33\1\0\3\33"+
    "\1\0\15\33\24\0\1\174\2\33\1\175\24\33\1\0"+
    "\3\33\1\0\15\33\24\0\3\33\1\176\24\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\177\10\33\1\200\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\3\33\1\201\1\202"+
    "\2\33\1\203\4\33\1\204\13\33\1\0\3\33\1\0"+
    "\15\33\24\0\7\33\1\205\1\33\1\206\16\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\207\2\33\1\210\1\211"+
    "\1\212\1\33\1\213\1\33\1\214\2\33\1\215\13\33"+
    "\1\0\3\33\1\0\15\33\24\0\1\216\2\33\1\217"+
    "\5\33\1\220\2\33\1\221\1\33\1\222\11\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\223\2\33\1\224\3\33"+
    "\1\225\1\33\1\226\16\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\227\2\33\1\230\1\231\1\232\1\33\1\233"+
    "\1\33\1\234\2\33\1\235\13\33\1\0\3\33\1\0"+
    "\15\33\24\0\30\33\1\0\3\33\1\0\15\33\24\0"+
    "\3\33\1\236\24\33\1\0\3\33\1\0\15\33\33\0"+
    "\1\237\26\0\1\36\3\0\1\237\4\0\1\36\2\0"+
    "\1\240\23\0\30\33\1\0\3\33\1\0\3\33\1\241"+
    "\11\33\24\0\30\33\1\0\3\33\1\0\7\33\1\242"+
    "\5\33\33\0\1\237\21\0\1\243\4\0\1\36\3\0"+
    "\1\237\4\0\1\36\1\243\1\0\1\240\22\0\55\244"+
    "\1\245\1\0\17\244\60\0\1\32\76\0\1\246\1\247"+
    "\100\0\1\32\76\0\1\32\77\0\1\32\77\0\1\32"+
    "\77\0\1\32\2\0\2\33\1\250\25\33\1\0\3\33"+
    "\1\0\15\33\24\0\2\33\1\251\5\33\1\56\17\33"+
    "\1\0\3\33\1\0\15\33\24\0\4\33\1\252\1\33"+
    "\1\253\21\33\1\0\3\33\1\0\15\33\24\0\6\33"+
    "\1\254\21\33\1\0\3\33\1\0\15\33\24\0\6\33"+
    "\1\255\21\33\1\0\3\33\1\0\15\33\24\0\13\33"+
    "\1\56\1\33\1\56\12\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\56\12\33\1\56\14\33\1\0\3\33\1\0"+
    "\15\33\24\0\7\33\1\56\20\33\1\0\3\33\1\0"+
    "\15\33\24\0\21\33\1\56\6\33\1\0\3\33\1\0"+
    "\15\33\24\0\10\33\1\256\17\33\1\0\3\33\1\0"+
    "\15\33\24\0\6\33\1\257\21\33\1\0\3\33\1\0"+
    "\15\33\24\0\4\33\1\260\23\33\1\0\3\33\1\0"+
    "\15\33\24\0\6\33\1\261\12\33\1\236\6\33\1\0"+
    "\3\33\1\0\15\33\24\0\6\33\1\262\21\33\1\0"+
    "\3\33\1\0\15\33\24\0\3\33\1\263\3\33\1\264"+
    "\20\33\1\0\3\33\1\0\15\33\24\0\20\33\1\62"+
    "\7\33\1\0\3\33\1\0\15\33\24\0\26\33\1\62"+
    "\1\33\1\0\3\33\1\0\15\33\24\0\1\33\1\265"+
    "\24\33\1\56\1\33\1\0\3\33\1\0\15\33\24\0"+
    "\1\266\27\33\1\0\3\33\1\0\15\33\24\0\2\33"+
    "\1\267\1\33\1\270\1\33\1\271\1\33\1\272\15\33"+
    "\1\273\1\33\1\0\3\33\1\0\15\33\24\0\14\33"+
    "\1\274\1\33\1\275\11\33\1\0\3\33\1\0\15\33"+
    "\24\0\17\33\1\62\10\33\1\0\3\33\1\0\15\33"+
    "\24\0\2\33\1\276\25\33\1\0\3\33\1\0\15\33"+
    "\24\0\5\33\1\277\22\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\300\27\33\1\0\3\33\1\0\15\33\24\0"+
    "\1\301\27\33\1\0\3\33\1\0\15\33\24\0\4\33"+
    "\1\302\23\33\1\0\3\33\1\0\15\33\24\0\6\33"+
    "\1\303\21\33\1\0\3\33\1\0\15\33\24\0\6\33"+
    "\1\304\21\33\1\0\3\33\1\0\15\33\24\0\4\33"+
    "\1\205\23\33\1\0\3\33\1\0\15\33\24\0\13\33"+
    "\1\253\14\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\305\20\33\1\0\3\33\1\0\15\33\24\0\6\33"+
    "\1\255\1\306\20\33\1\0\3\33\1\0\15\33\24\0"+
    "\27\33\1\307\1\0\3\33\1\0\15\33\24\0\2\33"+
    "\1\203\7\33\1\310\15\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\311\7\33\1\312\13\33\1\253\3\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\313\17\33\1\314\6\33"+
    "\1\203\1\0\3\33\1\0\15\33\24\0\12\33\1\315"+
    "\7\33\1\62\5\33\1\0\3\33\1\0\15\33\24\0"+
    "\1\316\6\33\1\317\1\33\1\320\16\33\1\0\3\33"+
    "\1\0\15\33\24\0\11\33\1\321\10\33\1\322\1\323"+
    "\4\33\1\0\3\33\1\0\15\33\24\0\13\33\1\324"+
    "\7\33\1\253\4\33\1\0\3\33\1\0\15\33\24\0"+
    "\1\33\1\325\26\33\1\0\3\33\1\0\15\33\24\0"+
    "\7\33\1\326\20\33\1\0\3\33\1\0\15\33\24\0"+
    "\23\33\1\56\4\33\1\0\3\33\1\0\15\33\24\0"+
    "\26\33\1\327\1\33\1\0\1\330\2\33\1\0\15\33"+
    "\24\0\26\33\1\331\1\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\332\4\33\1\333\3\33\1\334\3\33\1\335"+
    "\12\33\1\0\3\33\1\0\15\33\24\0\7\33\1\336"+
    "\20\33\1\0\3\33\1\0\15\33\24\0\10\33\1\337"+
    "\17\33\1\0\3\33\1\0\15\33\24\0\2\33\1\62"+
    "\25\33\1\0\3\33\1\0\15\33\24\0\13\33\1\340"+
    "\14\33\1\0\3\33\1\0\15\33\24\0\14\33\1\341"+
    "\13\33\1\0\3\33\1\0\15\33\24\0\6\33\1\342"+
    "\1\343\1\344\1\345\16\33\1\0\3\33\1\0\15\33"+
    "\24\0\2\33\1\346\3\33\1\347\21\33\1\0\3\33"+
    "\1\0\15\33\24\0\1\350\3\33\1\351\1\352\4\33"+
    "\1\353\1\33\1\354\11\33\1\355\1\33\1\0\3\33"+
    "\1\0\15\33\24\0\3\33\1\134\1\33\1\356\22\33"+
    "\1\0\3\33\1\0\15\33\24\0\14\33\1\357\13\33"+
    "\1\0\3\33\1\0\15\33\24\0\3\33\1\360\3\33"+
    "\1\361\20\33\1\0\3\33\1\0\15\33\24\0\1\362"+
    "\6\33\1\363\20\33\1\0\3\33\1\0\15\33\24\0"+
    "\3\33\1\364\24\33\1\0\3\33\1\0\15\33\24\0"+
    "\2\33\1\365\3\33\1\366\1\33\1\367\1\370\1\253"+
    "\1\371\7\33\1\372\4\33\1\0\3\33\1\0\15\33"+
    "\24\0\7\33\1\373\20\33\1\0\3\33\1\0\15\33"+
    "\24\0\26\33\1\374\1\33\1\0\3\33\1\0\15\33"+
    "\24\0\6\33\1\375\17\33\1\376\1\33\1\0\3\33"+
    "\1\0\15\33\24\0\6\33\1\56\1\33\1\377\1\33"+
    "\1\u0100\15\33\1\0\3\33\1\0\15\33\24\0\4\33"+
    "\1\u0101\21\33\1\u0102\1\33\1\0\3\33\1\0\15\33"+
    "\24\0\30\33\1\0\1\203\2\33\1\0\15\33\24\0"+
    "\16\33\1\173\11\33\1\0\3\33\1\0\15\33\24\0"+
    "\6\33\1\u0103\6\33\1\56\12\33\1\0\3\33\1\0"+
    "\15\33\24\0\10\33\1\u0104\17\33\1\0\3\33\1\0"+
    "\15\33\24\0\5\33\1\u0105\20\33\1\u0106\1\33\1\0"+
    "\3\33\1\0\15\33\24\0\26\33\1\u0107\1\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\u0108\1\33\1\u0109\1\33"+
    "\1\u010a\3\33\1\u010b\1\33\1\205\14\33\1\u010c\1\0"+
    "\3\33\1\0\15\33\24\0\1\u010d\1\33\1\u010e\25\33"+
    "\1\0\3\33\1\0\15\33\24\0\3\33\1\u0107\24\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\u010f\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\4\33\1\u0110\17\33"+
    "\1\u0111\3\33\1\0\3\33\1\0\15\33\24\0\4\33"+
    "\1\62\23\33\1\0\3\33\1\0\15\33\24\0\1\u0112"+
    "\1\33\1\u0113\1\33\1\u0114\1\33\1\u0115\1\33\1\u0116"+
    "\7\33\1\u0117\2\33\1\u0118\3\33\1\u0119\1\0\3\33"+
    "\1\0\15\33\24\0\21\33\1\u011a\6\33\1\0\3\33"+
    "\1\0\15\33\24\0\1\u011b\27\33\1\0\3\33\1\0"+
    "\15\33\24\0\20\33\1\u011c\7\33\1\0\3\33\1\0"+
    "\15\33\24\0\4\33\1\u011d\1\u011b\22\33\1\0\3\33"+
    "\1\0\15\33\24\0\12\33\1\62\15\33\1\0\3\33"+
    "\1\0\15\33\24\0\4\33\1\u011e\7\33\1\u011f\13\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\u0120\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\6\33\1\u0121\21\33"+
    "\1\0\3\33\1\0\15\33\24\0\3\33\1\u0122\24\33"+
    "\1\0\3\33\1\0\15\33\24\0\6\33\1\56\21\33"+
    "\1\0\3\33\1\0\15\33\24\0\1\352\2\33\1\u0123"+
    "\24\33\1\0\3\33\1\0\15\33\24\0\15\33\1\56"+
    "\12\33\1\0\3\33\1\0\15\33\24\0\4\33\1\u0124"+
    "\23\33\1\0\3\33\1\0\15\33\24\0\2\33\1\u0125"+
    "\10\33\1\56\1\u0126\13\33\1\0\3\33\1\0\15\33"+
    "\24\0\2\33\1\u0127\25\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\336\27\33\1\0\3\33\1\0\15\33\24\0"+
    "\1\33\1\u0128\26\33\1\0\3\33\1\0\15\33\24\0"+
    "\14\33\1\u0129\13\33\1\0\3\33\1\0\15\33\24\0"+
    "\20\33\1\u012a\7\33\1\0\3\33\1\0\15\33\24\0"+
    "\3\33\1\u012b\3\33\1\u012c\1\33\1\u012d\16\33\1\0"+
    "\3\33\1\0\15\33\24\0\11\33\1\u012e\16\33\1\0"+
    "\3\33\1\0\15\33\24\0\14\33\1\260\13\33\1\0"+
    "\3\33\1\0\15\33\24\0\6\33\1\u012f\21\33\1\0"+
    "\3\33\1\0\15\33\24\0\11\33\1\u0130\16\33\1\0"+
    "\3\33\1\0\15\33\24\0\7\33\1\u0131\1\33\1\170"+
    "\16\33\1\0\3\33\1\0\15\33\24\0\6\33\1\u0132"+
    "\21\33\1\0\1\56\2\33\1\0\15\33\24\0\12\33"+
    "\1\65\1\u0133\14\33\1\0\3\33\1\0\15\33\24\0"+
    "\14\33\1\316\13\33\1\0\3\33\1\0\15\33\24\0"+
    "\12\33\1\u0134\15\33\1\0\3\33\1\0\15\33\24\0"+
    "\4\33\1\134\23\33\1\0\3\33\1\0\15\33\24\0"+
    "\5\33\1\u0135\6\33\1\u0136\13\33\1\0\3\33\1\0"+
    "\15\33\24\0\3\33\1\u0137\24\33\1\0\3\33\1\0"+
    "\15\33\24\0\4\33\1\u0124\5\33\1\u0138\15\33\1\0"+
    "\3\33\1\0\15\33\24\0\6\33\1\u0132\21\33\1\0"+
    "\3\33\1\0\15\33\24\0\4\33\1\u0139\7\33\1\u013a"+
    "\13\33\1\0\3\33\1\0\15\33\24\0\3\33\1\u013b"+
    "\3\33\1\u013c\20\33\1\0\3\33\1\0\15\33\24\0"+
    "\11\33\1\336\16\33\1\0\3\33\1\0\15\33\54\0"+
    "\1\u013d\5\0\1\u013e\10\0\1\u013e\3\0\1\u013d\3\0"+
    "\1\u013d\25\0\1\u013f\26\0\1\240\3\0\1\u013f\4\0"+
    "\1\240\26\0\30\33\1\0\3\33\1\0\4\33\1\u0140"+
    "\10\33\24\0\30\33\1\0\3\33\1\0\10\33\1\u0141"+
    "\4\33\24\0\2\u0142\5\0\2\u0142\2\0\1\u0142\13\0"+
    "\1\u0142\6\0\1\u0142\3\0\3\u0142\2\0\1\u0142\1\0"+
    "\1\u0142\23\0\76\u0143\62\u0144\1\u0145\13\u0144\1\0\3\33"+
    "\1\u0146\24\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u0147\20\33\1\0\3\33\1\0\15\33\24\0\3\33"+
    "\1\u0148\24\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u011b\20\33\1\0\3\33\1\0\15\33\24\0\16\33"+
    "\1\u0149\11\33\1\0\3\33\1\0\15\33\24\0\11\33"+
    "\1\u014a\16\33\1\0\3\33\1\0\15\33\24\0\22\33"+
    "\1\u0123\5\33\1\0\3\33\1\0\15\33\24\0\16\33"+
    "\1\56\11\33\1\0\3\33\1\0\15\33\24\0\22\33"+
    "\1\56\5\33\1\0\3\33\1\0\15\33\24\0\24\33"+
    "\1\u014b\3\33\1\0\3\33\1\0\15\33\24\0\25\33"+
    "\1\u014c\2\33\1\0\3\33\1\0\15\33\24\0\24\33"+
    "\1\134\3\33\1\0\3\33\1\0\15\33\24\0\1\260"+
    "\27\33\1\0\3\33\1\0\15\33\24\0\2\33\1\u014d"+
    "\25\33\1\0\3\33\1\0\15\33\24\0\6\33\1\u014e"+
    "\21\33\1\0\3\33\1\0\15\33\24\0\2\33\1\u014f"+
    "\25\33\1\0\3\33\1\0\15\33\24\0\7\33\1\u0150"+
    "\20\33\1\0\3\33\1\0\15\33\24\0\5\33\1\u0151"+
    "\22\33\1\0\3\33\1\0\15\33\24\0\3\33\1\u0135"+
    "\1\33\1\u0152\1\255\21\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\u0153\27\33\1\0\3\33\1\0\15\33\24\0"+
    "\3\33\1\206\24\33\1\0\3\33\1\0\15\33\24\0"+
    "\7\33\1\u0154\20\33\1\0\3\33\1\0\15\33\24\0"+
    "\6\33\1\u0155\21\33\1\0\3\33\1\0\15\33\24\0"+
    "\6\33\1\u0156\21\33\1\0\3\33\1\0\15\33\24\0"+
    "\10\33\1\62\17\33\1\0\3\33\1\0\15\33\24\0"+
    "\4\33\1\u0157\23\33\1\0\3\33\1\0\15\33\24\0"+
    "\2\33\1\u0158\4\33\1\u0159\1\u015a\13\33\1\u015b\3\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\u011b\13\33"+
    "\1\372\4\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u015c\20\33\1\0\3\33\1\0\15\33\24\0\14\33"+
    "\1\u015d\13\33\1\0\3\33\1\0\15\33\24\0\12\33"+
    "\1\u015e\15\33\1\0\3\33\1\0\15\33\24\0\2\33"+
    "\1\u015f\25\33\1\0\3\33\1\0\15\33\24\0\21\33"+
    "\1\u0160\6\33\1\0\3\33\1\0\15\33\24\0\13\33"+
    "\1\56\14\33\1\0\3\33\1\0\15\33\24\0\1\u0124"+
    "\27\33\1\0\3\33\1\0\15\33\24\0\13\33\1\u011c"+
    "\14\33\1\0\3\33\1\0\15\33\24\0\7\33\1\u0124"+
    "\20\33\1\0\3\33\1\0\15\33\24\0\7\33\1\u0161"+
    "\20\33\1\0\3\33\1\0\15\33\24\0\21\33\1\62"+
    "\6\33\1\0\3\33\1\0\15\33\24\0\14\33\1\56"+
    "\13\33\1\0\3\33\1\0\15\33\24\0\12\33\1\63"+
    "\15\33\1\0\3\33\1\0\15\33\24\0\3\33\1\336"+
    "\24\33\1\0\2\33\1\u0162\1\0\15\33\24\0\12\33"+
    "\1\u0163\15\33\1\0\3\33\1\0\15\33\24\0\11\33"+
    "\1\214\16\33\1\0\3\33\1\0\15\33\24\0\1\u0130"+
    "\27\33\1\0\3\33\1\0\15\33\24\0\4\33\1\u0164"+
    "\23\33\1\0\3\33\1\0\15\33\24\0\30\33\1\0"+
    "\2\33\1\u0165\1\0\15\33\24\0\23\33\1\u0166\4\33"+
    "\1\0\3\33\1\0\15\33\24\0\6\33\1\u0167\21\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\u0168\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\u0169\1\u016a"+
    "\15\33\1\0\3\33\1\0\15\33\24\0\7\33\1\56"+
    "\2\33\1\u0148\15\33\1\0\3\33\1\0\15\33\24\0"+
    "\21\33\1\u016b\4\33\1\56\1\33\1\0\3\33\1\0"+
    "\15\33\24\0\25\33\1\u016c\2\33\1\0\3\33\1\0"+
    "\15\33\24\0\12\33\1\56\15\33\1\0\3\33\1\0"+
    "\15\33\24\0\1\u016d\27\33\1\0\3\33\1\0\15\33"+
    "\24\0\30\33\1\u016e\3\33\1\0\15\33\24\0\4\33"+
    "\1\u016f\23\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u0170\4\33\1\u0171\13\33\1\0\3\33\1\0\15\33"+
    "\24\0\10\33\1\u0134\17\33\1\0\3\33\1\0\15\33"+
    "\24\0\7\33\1\u0172\20\33\1\0\3\33\1\0\15\33"+
    "\24\0\2\33\1\u0173\3\33\1\56\21\33\1\0\3\33"+
    "\1\0\15\33\24\0\6\33\2\56\1\u0174\17\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\u0175\27\33\1\0\3\33"+
    "\1\0\15\33\24\0\4\33\1\u0176\23\33\1\0\3\33"+
    "\1\0\15\33\24\0\4\33\1\u0177\1\u0178\22\33\1\0"+
    "\3\33\1\0\15\33\24\0\12\33\1\203\15\33\1\0"+
    "\3\33\1\0\15\33\24\0\2\33\1\u0179\3\33\1\u017a"+
    "\3\33\1\u017b\5\33\1\u017c\7\33\1\0\3\33\1\0"+
    "\15\33\24\0\14\33\1\u017d\13\33\1\0\3\33\1\0"+
    "\15\33\24\0\23\33\1\u017e\2\33\1\u017f\1\33\1\0"+
    "\3\33\1\0\15\33\24\0\2\33\1\u0180\25\33\1\0"+
    "\3\33\1\0\15\33\24\0\2\33\1\u0181\11\33\1\u0182"+
    "\13\33\1\0\3\33\1\0\15\33\24\0\2\33\1\u0183"+
    "\25\33\1\0\3\33\1\0\15\33\24\0\1\u0184\27\33"+
    "\1\0\3\33\1\0\15\33\24\0\14\33\1\u0185\13\33"+
    "\1\0\3\33\1\0\15\33\24\0\10\33\1\u0186\17\33"+
    "\1\0\3\33\1\0\15\33\24\0\4\33\1\u0187\23\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\u0188\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\3\33\1\56\3\33"+
    "\1\u0189\20\33\1\0\3\33\1\0\15\33\24\0\4\33"+
    "\1\u018a\23\33\1\0\3\33\1\0\15\33\24\0\6\33"+
    "\1\u018b\21\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u018c\1\33\1\u018d\16\33\1\0\3\33\1\0\15\33"+
    "\24\0\5\33\1\203\22\33\1\0\3\33\1\0\15\33"+
    "\24\0\12\33\1\u018e\15\33\1\0\3\33\1\0\15\33"+
    "\24\0\7\33\1\u018f\20\33\1\0\3\33\1\0\15\33"+
    "\24\0\5\33\1\u0190\3\33\1\u0191\16\33\1\0\3\33"+
    "\1\0\15\33\24\0\7\33\1\u0183\20\33\1\0\3\33"+
    "\1\0\15\33\24\0\16\33\1\u0192\11\33\1\0\3\33"+
    "\1\0\15\33\24\0\7\33\1\56\1\u0193\17\33\1\0"+
    "\3\33\1\0\15\33\24\0\4\33\1\u0194\23\33\1\0"+
    "\3\33\1\0\15\33\24\0\7\33\1\u0195\20\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\u0196\6\33\1\56\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\10\33\1\56\17\33"+
    "\1\0\3\33\1\0\15\33\24\0\1\33\1\170\26\33"+
    "\1\0\3\33\1\0\15\33\24\0\1\236\27\33\1\0"+
    "\3\33\1\0\15\33\24\0\4\33\1\u0197\23\33\1\0"+
    "\3\33\1\0\15\33\24\0\10\33\1\u0198\17\33\1\0"+
    "\3\33\1\0\15\33\24\0\7\33\1\u0184\20\33\1\0"+
    "\3\33\1\0\15\33\24\0\4\33\1\u0199\4\33\1\u019a"+
    "\16\33\1\0\3\33\1\0\15\33\24\0\1\u019b\6\33"+
    "\1\u019c\20\33\1\0\3\33\1\0\15\33\24\0\21\33"+
    "\1\u019d\6\33\1\0\3\33\1\0\15\33\24\0\6\33"+
    "\1\u019e\1\33\1\u019f\11\33\1\56\5\33\1\0\3\33"+
    "\1\0\15\33\24\0\2\33\1\u01a0\25\33\1\0\3\33"+
    "\1\0\15\33\24\0\4\33\1\u01a1\23\33\1\0\3\33"+
    "\1\0\15\33\24\0\2\33\1\56\5\33\1\u01a2\10\33"+
    "\1\u01a3\6\33\1\0\3\33\1\0\15\33\24\0\4\33"+
    "\1\56\6\33\1\u01a4\14\33\1\0\3\33\1\0\15\33"+
    "\24\0\6\33\1\u01a5\21\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\u01a6\27\33\1\0\3\33\1\0\15\33\24\0"+
    "\5\33\1\u01a7\22\33\1\0\3\33\1\0\15\33\24\0"+
    "\3\33\1\u01a8\24\33\1\0\3\33\1\0\15\33\24\0"+
    "\3\33\1\u01a9\3\33\1\u01aa\20\33\1\0\3\33\1\0"+
    "\15\33\24\0\4\33\1\u01ab\23\33\1\0\3\33\1\0"+
    "\15\33\24\0\7\33\1\u01ac\20\33\1\0\3\33\1\0"+
    "\15\33\24\0\16\33\1\203\11\33\1\0\3\33\1\0"+
    "\15\33\24\0\11\33\1\320\16\33\1\0\3\33\1\0"+
    "\15\33\24\0\13\33\1\u01ad\14\33\1\0\3\33\1\0"+
    "\15\33\24\0\5\33\1\u01ae\22\33\1\0\3\33\1\0"+
    "\15\33\24\0\10\33\1\156\4\33\1\u011c\12\33\1\0"+
    "\3\33\1\0\15\33\24\0\24\33\1\56\3\33\1\0"+
    "\3\33\1\0\15\33\24\0\3\33\1\56\24\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\33\1\312\26\33\1\0"+
    "\3\33\1\0\15\33\24\0\5\33\1\u0107\22\33\1\0"+
    "\3\33\1\0\15\33\24\0\4\33\1\56\23\33\1\0"+
    "\3\33\1\0\15\33\24\0\10\33\1\312\17\33\1\0"+
    "\3\33\1\0\15\33\24\0\6\33\1\u01af\21\33\1\0"+
    "\3\33\1\0\15\33\24\0\11\33\1\57\16\33\1\0"+
    "\3\33\1\0\15\33\24\0\4\33\1\u01b0\23\33\1\0"+
    "\3\33\1\0\15\33\24\0\10\33\1\u01b1\17\33\1\0"+
    "\3\33\1\0\15\33\24\0\3\33\1\203\24\33\1\0"+
    "\3\33\1\0\15\33\24\0\10\33\1\u01b2\17\33\1\0"+
    "\3\33\1\0\15\33\24\0\2\33\1\u01b3\5\33\1\u01b4"+
    "\12\33\1\u0199\4\33\1\0\3\33\1\0\15\33\24\0"+
    "\3\33\1\u011b\6\33\1\203\5\33\1\u01b5\5\33\1\u01b6"+
    "\1\33\1\0\3\33\1\0\15\33\24\0\6\33\1\u01b7"+
    "\21\33\1\0\3\33\1\0\15\33\24\0\16\33\1\u01b8"+
    "\11\33\1\0\3\33\1\0\15\33\24\0\6\33\1\u01b9"+
    "\21\33\1\0\3\33\1\0\15\33\24\0\12\33\1\u01ba"+
    "\1\33\1\62\13\33\1\0\3\33\1\0\15\33\24\0"+
    "\10\33\1\257\17\33\1\0\3\33\1\0\15\33\24\0"+
    "\5\33\1\170\22\33\1\0\3\33\1\0\15\33\24\0"+
    "\5\33\1\u0184\22\33\1\0\3\33\1\0\15\33\24\0"+
    "\12\33\1\311\15\33\1\0\3\33\1\0\15\33\24\0"+
    "\6\33\1\u01bb\1\u01bc\20\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\203\27\33\1\0\3\33\1\0\15\33\24\0"+
    "\10\33\1\57\17\33\1\0\3\33\1\0\15\33\24\0"+
    "\4\33\1\u01bd\2\33\1\56\20\33\1\0\3\33\1\0"+
    "\15\33\24\0\2\33\1\203\25\33\1\0\3\33\1\0"+
    "\15\33\24\0\26\33\1\56\1\33\1\0\3\33\1\0"+
    "\15\33\24\0\7\33\1\u01be\20\33\1\0\3\33\1\0"+
    "\15\33\62\0\1\u013e\10\0\1\u013e\56\0\1\u01bf\5\0"+
    "\1\u01c0\10\0\1\u01c0\3\0\1\u01bf\3\0\1\u01bf\16\0"+
    "\30\33\1\0\3\33\1\0\5\33\1\u01c1\7\33\24\0"+
    "\30\33\1\0\3\33\1\0\11\33\1\u0140\3\33\23\0"+
    "\56\u0143\1\35\17\u0143\62\u0144\1\u01c2\13\u0144\62\u0145\1\u01c2"+
    "\13\u0145\1\0\4\33\1\u017e\23\33\1\0\3\33\1\0"+
    "\15\33\24\0\14\33\1\57\13\33\1\0\3\33\1\0"+
    "\15\33\24\0\10\33\1\361\17\33\1\0\3\33\1\0"+
    "\15\33\24\0\3\33\1\u01c3\24\33\1\0\3\33\1\0"+
    "\15\33\24\0\3\33\1\336\24\33\1\0\3\33\1\0"+
    "\15\33\24\0\7\33\1\132\20\33\1\0\3\33\1\0"+
    "\15\33\24\0\4\33\1\u01c4\23\33\1\0\3\33\1\0"+
    "\15\33\24\0\6\33\1\u01c5\21\33\1\0\3\33\1\0"+
    "\15\33\24\0\11\33\1\u01c6\16\33\1\0\3\33\1\0"+
    "\15\33\24\0\11\33\1\u01c7\16\33\1\0\3\33\1\0"+
    "\15\33\24\0\10\33\1\203\17\33\1\0\3\33\1\0"+
    "\15\33\24\0\2\33\1\253\25\33\1\0\3\33\1\0"+
    "\15\33\24\0\14\33\1\u01c8\13\33\1\0\3\33\1\0"+
    "\15\33\24\0\12\33\1\u01c9\15\33\1\0\3\33\1\0"+
    "\15\33\24\0\26\33\1\u01ca\1\33\1\0\3\33\1\0"+
    "\15\33\24\0\7\33\1\u01cb\20\33\1\0\3\33\1\0"+
    "\15\33\24\0\13\33\1\u0163\14\33\1\0\3\33\1\0"+
    "\15\33\24\0\4\33\1\u01cc\23\33\1\0\3\33\1\0"+
    "\15\33\24\0\6\33\1\361\21\33\1\0\3\33\1\0"+
    "\15\33\24\0\14\33\1\u01cd\13\33\1\0\3\33\1\0"+
    "\15\33\24\0\1\56\2\33\1\u01ce\24\33\1\0\3\33"+
    "\1\0\15\33\24\0\1\u01cf\27\33\1\0\3\33\1\0"+
    "\15\33\24\0\6\33\1\u01d0\21\33\1\0\3\33\1\0"+
    "\15\33\24\0\4\33\1\u01d1\23\33\1\0\3\33\1\0"+
    "\15\33\24\0\13\33\1\u01d2\1\u01d3\13\33\1\0\1\u01d4"+
    "\1\33\1\u01d5\1\0\15\33\24\0\7\33\1\u0173\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\5\33\1\u01d6\22\33"+
    "\1\0\3\33\1\0\15\33\24\0\12\33\1\u0121\15\33"+
    "\1\0\3\33\1\0\15\33\24\0\5\33\1\62\22\33"+
    "\1\0\3\33\1\0\15\33\24\0\3\33\1\u01d7\24\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\u01d8\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\5\33\1\312\22\33"+
    "\1\0\3\33\1\0\15\33\24\0\3\33\1\u01d9\24\33"+
    "\1\0\3\33\1\0\15\33\24\0\2\33\1\u01da\25\33"+
    "\1\0\3\33\1\0\15\33\24\0\2\33\1\u01db\14\33"+
    "\1\u01dc\10\33\1\0\3\33\1\0\15\33\24\0\4\33"+
    "\1\u011c\23\33\1\0\3\33\1\0\15\33\24\0\2\33"+
    "\1\u01dd\25\33\1\0\3\33\1\0\15\33\24\0\21\33"+
    "\1\253\6\33\1\0\3\33\1\0\15\33\24\0\10\33"+
    "\1\u01de\17\33\1\0\3\33\1\0\15\33\24\0\23\33"+
    "\1\62\4\33\1\0\3\33\1\0\15\33\33\0\1\u01df"+
    "\66\0\20\33\1\u0124\7\33\1\0\3\33\1\0\15\33"+
    "\24\0\14\33\1\u01e0\13\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\u0150\27\33\1\0\3\33\1\0\15\33\24\0"+
    "\23\33\1\u01e1\4\33\1\0\3\33\1\0\15\33\24\0"+
    "\6\33\1\u0183\21\33\1\0\3\33\1\0\15\33\24\0"+
    "\1\u01e2\27\33\1\0\3\33\1\0\15\33\24\0\4\33"+
    "\1\u01e3\23\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u01e4\20\33\1\0\3\33\1\0\15\33\24\0\1\u01e5"+
    "\27\33\1\0\3\33\1\0\15\33\24\0\26\33\1\336"+
    "\1\33\1\0\3\33\1\0\15\33\24\0\6\33\1\u01e6"+
    "\21\33\1\0\3\33\1\0\15\33\24\0\1\u01e7\10\33"+
    "\1\u01e8\16\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u01e9\20\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u01aa\20\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u01ea\20\33\1\0\3\33\1\0\15\33\24\0\11\33"+
    "\1\203\16\33\1\0\3\33\1\0\15\33\24\0\6\33"+
    "\1\u01eb\21\33\1\0\3\33\1\0\15\33\24\0\3\33"+
    "\1\u011b\24\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u01ec\20\33\1\0\3\33\1\0\15\33\24\0\2\33"+
    "\1\56\25\33\1\0\3\33\1\0\15\33\24\0\6\33"+
    "\1\62\21\33\1\0\3\33\1\0\15\33\24\0\1\u01ed"+
    "\24\33\1\u014c\2\33\1\0\3\33\1\0\15\33\24\0"+
    "\22\33\1\u01ee\5\33\1\0\3\33\1\0\15\33\24\0"+
    "\1\57\27\33\1\0\3\33\1\0\15\33\24\0\12\33"+
    "\1\u01ef\1\33\1\203\13\33\1\0\3\33\1\0\15\33"+
    "\24\0\14\33\1\u01f0\4\33\1\253\6\33\1\0\3\33"+
    "\1\0\15\33\24\0\5\33\1\u01ce\22\33\1\0\3\33"+
    "\1\0\15\33\24\0\11\33\1\u01f1\16\33\1\0\3\33"+
    "\1\0\15\33\24\0\30\33\1\0\1\56\2\33\1\0"+
    "\15\33\24\0\10\33\1\u01f2\17\33\1\0\3\33\1\0"+
    "\15\33\24\0\6\33\1\u01f3\21\33\1\0\3\33\1\0"+
    "\15\33\24\0\13\33\1\u01f4\14\33\1\0\3\33\1\0"+
    "\15\33\24\0\14\33\1\312\13\33\1\0\3\33\1\0"+
    "\15\33\24\0\3\33\1\u01e0\24\33\1\0\3\33\1\0"+
    "\15\33\24\0\7\33\1\u01f5\20\33\1\0\3\33\1\0"+
    "\15\33\24\0\4\33\1\u01f6\23\33\1\0\3\33\1\0"+
    "\15\33\24\0\11\33\1\u01f7\16\33\1\0\3\33\1\0"+
    "\15\33\24\0\14\33\1\u01b0\13\33\1\0\3\33\1\0"+
    "\15\33\24\0\1\33\1\u01f8\26\33\1\0\3\33\1\0"+
    "\15\33\24\0\4\33\1\u01f9\23\33\1\0\3\33\1\0"+
    "\15\33\24\0\14\33\1\u01fa\13\33\1\0\3\33\1\0"+
    "\15\33\24\0\1\u01fb\27\33\1\0\3\33\1\0\15\33"+
    "\24\0\26\33\1\312\1\33\1\0\3\33\1\0\15\33"+
    "\24\0\5\33\1\u01fc\22\33\1\0\3\33\1\0\15\33"+
    "\24\0\14\33\1\u01fd\13\33\1\0\3\33\1\0\15\33"+
    "\24\0\12\33\1\u01fe\15\33\1\0\3\33\1\0\15\33"+
    "\24\0\11\33\1\u01ff\2\33\1\u0200\13\33\1\0\3\33"+
    "\1\0\15\33\24\0\3\33\1\u0201\24\33\1\0\3\33"+
    "\1\0\15\33\24\0\7\33\1\u0159\20\33\1\0\3\33"+
    "\1\0\15\33\24\0\1\33\1\u0202\26\33\1\0\3\33"+
    "\1\0\15\33\24\0\3\33\1\u0203\24\33\1\0\3\33"+
    "\1\0\15\33\24\0\5\33\1\u0204\22\33\1\0\3\33"+
    "\1\0\15\33\24\0\6\33\1\u0205\21\33\1\0\3\33"+
    "\1\0\15\33\24\0\3\33\1\u01fb\10\33\1\u0206\13\33"+
    "\1\0\3\33\1\0\15\33\24\0\6\33\1\u0207\21\33"+
    "\1\0\3\33\1\0\15\33\24\0\14\33\1\336\13\33"+
    "\1\0\3\33\1\0\15\33\24\0\12\33\1\u0208\15\33"+
    "\1\0\3\33\1\0\15\33\24\0\22\33\1\62\5\33"+
    "\1\0\3\33\1\0\15\33\24\0\14\33\1\203\13\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\u0209\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\14\33\1\u020a\13\33"+
    "\1\0\3\33\1\0\15\33\24\0\4\33\1\u020b\23\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\u020c\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\312\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\u0104\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\352\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\u020d\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\u020e\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\u020f\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\u0210\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\1\u0211\27\33\1\0"+
    "\3\33\1\0\15\33\24\0\27\33\1\u0181\1\0\3\33"+
    "\1\0\15\33\24\0\11\33\1\u0212\16\33\1\0\3\33"+
    "\1\0\15\33\24\0\7\33\1\u01a4\20\33\1\0\3\33"+
    "\1\0\15\33\24\0\7\33\1\u0213\20\33\1\0\3\33"+
    "\1\0\15\33\24\0\14\33\1\211\13\33\1\0\3\33"+
    "\1\0\15\33\24\0\11\33\1\u0214\16\33\1\0\3\33"+
    "\1\0\15\33\24\0\27\33\1\u0215\1\0\3\33\1\0"+
    "\15\33\24\0\6\33\1\u0216\21\33\1\0\3\33\1\0"+
    "\15\33\62\0\1\u01c0\10\0\1\u01c0\64\0\1\u01c0\10\0"+
    "\1\u01c0\2\0\1\u013e\22\0\61\u0145\1\35\1\u01c2\13\u0145"+
    "\1\0\14\33\1\u0217\13\33\1\0\3\33\1\0\15\33"+
    "\24\0\7\33\1\u0218\20\33\1\0\3\33\1\0\15\33"+
    "\24\0\14\33\1\u011c\13\33\1\0\3\33\1\0\15\33"+
    "\24\0\2\33\1\u0219\25\33\1\0\3\33\1\0\15\33"+
    "\24\0\3\33\1\u021a\24\33\1\0\3\33\1\0\15\33"+
    "\24\0\11\33\1\u021b\16\33\1\0\3\33\1\0\15\33"+
    "\24\0\6\33\1\u021c\21\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\56\27\33\1\0\3\33\1\0\15\33\24\0"+
    "\26\33\1\u021d\1\33\1\0\3\33\1\0\15\33\24\0"+
    "\11\33\1\352\16\33\1\0\3\33\1\0\15\33\24\0"+
    "\14\33\1\u0181\13\33\1\0\3\33\1\0\15\33\24\0"+
    "\13\33\1\62\14\33\1\0\3\33\1\0\15\33\24\0"+
    "\14\33\1\u021e\13\33\1\0\3\33\1\0\15\33\24\0"+
    "\1\u021f\27\33\1\0\3\33\1\0\15\33\24\0\1\u0220"+
    "\27\33\1\0\3\33\1\0\15\33\24\0\3\33\1\u0221"+
    "\24\33\1\0\3\33\1\0\15\33\24\0\26\33\1\u0124"+
    "\1\33\1\0\3\33\1\0\15\33\24\0\5\33\1\u0222"+
    "\22\33\1\0\3\33\1\0\15\33\24\0\1\316\27\33"+
    "\1\0\3\33\1\0\15\33\24\0\24\33\1\336\3\33"+
    "\1\0\3\33\1\0\15\33\24\0\2\33\1\u0223\25\33"+
    "\1\0\3\33\1\0\15\33\24\0\14\33\1\u01b6\13\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\100\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\6\33\1\u0224\21\33"+
    "\1\0\3\33\1\0\15\33\24\0\3\33\1\u0225\24\33"+
    "\1\0\3\33\1\0\15\33\24\0\1\u0138\3\33\1\u0177"+
    "\23\33\1\0\3\33\1\0\15\33\24\0\3\33\1\u0226"+
    "\24\33\1\0\3\33\1\0\15\33\55\0\1\u0227\44\0"+
    "\12\33\1\312\15\33\1\0\3\33\1\0\15\33\24\0"+
    "\6\33\1\u0228\21\33\1\0\3\33\1\0\15\33\24\0"+
    "\13\33\1\u0229\14\33\1\0\3\33\1\0\15\33\24\0"+
    "\3\33\1\63\24\33\1\0\3\33\1\0\15\33\24\0"+
    "\2\33\1\300\25\33\1\0\3\33\1\0\15\33\24\0"+
    "\6\33\1\u022a\21\33\1\0\3\33\1\0\15\33\24\0"+
    "\14\33\1\u022b\13\33\1\0\3\33\1\0\15\33\24\0"+
    "\11\33\1\u022c\16\33\1\0\3\33\1\0\15\33\24\0"+
    "\12\33\1\u0162\15\33\1\0\3\33\1\0\15\33\24\0"+
    "\10\33\1\u01e1\17\33\1\0\3\33\1\0\15\33\24\0"+
    "\2\33\1\u022d\25\33\1\0\3\33\1\0\15\33\24\0"+
    "\7\33\1\u022e\20\33\1\0\3\33\1\0\15\33\24\0"+
    "\12\33\1\u022f\15\33\1\0\3\33\1\0\15\33\24\0"+
    "\10\33\1\u0230\17\33\1\0\3\33\1\0\15\33\24\0"+
    "\23\33\1\u0231\4\33\1\0\3\33\1\0\15\33\24\0"+
    "\2\33\1\u0232\25\33\1\0\3\33\1\0\15\33\24\0"+
    "\2\33\1\270\15\33\1\312\7\33\1\0\3\33\1\0"+
    "\15\33\24\0\1\u0233\27\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\u0234\27\33\1\0\3\33\1\0\15\33\24\0"+
    "\11\33\1\u0235\16\33\1\0\3\33\1\0\15\33\24\0"+
    "\11\33\1\361\16\33\1\0\3\33\1\0\15\33\24\0"+
    "\10\33\1\260\17\33\1\0\3\33\1\0\15\33\24\0"+
    "\5\33\1\356\22\33\1\0\3\33\1\0\15\33\24\0"+
    "\27\33\1\56\1\0\3\33\1\0\15\33\24\0\1\134"+
    "\27\33\1\0\3\33\1\0\15\33\24\0\11\33\1\u0236"+
    "\16\33\1\0\3\33\1\0\15\33\24\0\14\33\1\62"+
    "\13\33\1\0\3\33\1\0\15\33\24\0\4\33\1\203"+
    "\23\33\1\0\3\33\1\0\15\33\24\0\14\33\1\u0237"+
    "\13\33\1\0\3\33\1\0\15\33\24\0\3\33\1\u01c6"+
    "\24\33\1\0\3\33\1\0\15\33\24\0\12\33\1\u0150"+
    "\15\33\1\0\3\33\1\0\15\33\24\0\11\33\1\u0238"+
    "\16\33\1\0\3\33\1\0\15\33\24\0\12\33\1\u0239"+
    "\15\33\1\0\3\33\1\0\15\33\24\0\1\u01f5\27\33"+
    "\1\0\3\33\1\0\15\33\24\0\5\33\1\352\22\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\u023a\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\155\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\u0150\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\72\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\27\33\1\u023b\1\0"+
    "\3\33\1\0\15\33\24\0\10\33\1\u0187\17\33\1\0"+
    "\3\33\1\0\15\33\24\0\7\33\1\u023c\20\33\1\0"+
    "\3\33\1\0\15\33\24\0\3\33\1\u01f5\24\33\1\0"+
    "\3\33\1\0\15\33\24\0\13\33\1\u023d\14\33\1\0"+
    "\3\33\1\0\15\33\24\0\14\33\1\72\13\33\1\0"+
    "\3\33\1\0\15\33\24\0\2\33\1\255\25\33\1\0"+
    "\3\33\1\0\15\33\24\0\4\33\1\u023e\23\33\1\0"+
    "\3\33\1\0\15\33\24\0\14\33\1\205\13\33\1\0"+
    "\3\33\1\0\15\33\24\0\12\33\1\u023f\15\33\1\0"+
    "\3\33\1\0\15\33\24\0\20\33\1\253\7\33\1\0"+
    "\3\33\1\0\15\33\24\0\21\33\1\336\6\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\u0240\27\33\1\0\3\33"+
    "\1\0\15\33\24\0\7\33\1\u0241\20\33\1\0\3\33"+
    "\1\0\15\33\24\0\11\33\1\u0242\16\33\1\0\3\33"+
    "\1\0\15\33\24\0\12\33\1\u0243\15\33\1\0\3\33"+
    "\1\0\15\33\24\0\6\33\1\u0244\21\33\1\0\3\33"+
    "\1\0\15\33\24\0\12\33\1\u0245\15\33\1\0\3\33"+
    "\1\0\15\33\24\0\6\33\1\u0246\21\33\1\0\3\33"+
    "\1\0\15\33\24\0\11\33\1\u0247\16\33\1\0\3\33"+
    "\1\0\15\33\24\0\25\33\1\u0248\2\33\1\0\3\33"+
    "\1\0\15\33\24\0\12\33\1\u011c\15\33\1\0\3\33"+
    "\1\0\15\33\24\0\23\33\1\u0183\4\33\1\0\3\33"+
    "\1\0\15\33\24\0\6\33\1\u0249\21\33\1\0\3\33"+
    "\1\0\15\33\24\0\24\33\1\u024a\3\33\1\0\3\33"+
    "\1\0\15\33\24\0\7\33\1\u0211\20\33\1\0\3\33"+
    "\1\0\15\33\24\0\1\u024b\27\33\1\0\3\33\1\0"+
    "\15\33\24\0\1\162\27\33\1\0\3\33\1\0\15\33"+
    "\24\0\12\33\1\u024c\15\33\1\0\3\33\1\0\15\33"+
    "\24\0\12\33\1\u024d\15\33\1\0\3\33\1\0\15\33"+
    "\33\0\1\u024e\66\0\7\33\1\u024f\20\33\1\0\3\33"+
    "\1\0\15\33\24\0\7\33\1\56\1\33\1\u014a\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\1\u0250\27\33\1\0"+
    "\3\33\1\0\15\33\24\0\12\33\1\u0251\15\33\1\0"+
    "\3\33\1\0\15\33\24\0\23\33\1\u0252\4\33\1\0"+
    "\3\33\1\0\15\33\24\0\14\33\1\u0253\13\33\1\0"+
    "\3\33\1\0\15\33\24\0\6\33\1\u0254\21\33\1\0"+
    "\3\33\1\0\15\33\24\0\6\33\1\u0255\21\33\1\0"+
    "\3\33\1\0\15\33\24\0\3\33\1\u01cc\24\33\1\0"+
    "\3\33\1\0\15\33\24\0\11\33\1\u01a6\16\33\1\0"+
    "\3\33\1\0\15\33\24\0\4\33\1\u0256\23\33\1\0"+
    "\3\33\1\0\15\33\24\0\6\33\1\u0181\21\33\1\0"+
    "\3\33\1\0\15\33\24\0\6\33\1\u0257\21\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\33\1\62\21\33\1\u0234"+
    "\4\33\1\0\3\33\1\0\15\33\24\0\1\u0105\6\33"+
    "\1\311\20\33\1\0\3\33\1\0\15\33\24\0\1\33"+
    "\1\u0258\26\33\1\0\3\33\1\0\15\33\24\0\12\33"+
    "\1\270\15\33\1\0\3\33\1\0\15\33\24\0\13\33"+
    "\1\u0259\14\33\1\0\3\33\1\0\15\33\24\0\11\33"+
    "\1\u025a\16\33\1\0\3\33\1\0\15\33\24\0\12\33"+
    "\1\u025b\15\33\1\0\3\33\1\0\15\33\24\0\5\33"+
    "\1\u01fb\22\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u025c\20\33\1\0\3\33\1\0\15\33\24\0\30\33"+
    "\1\0\3\33\1\u025d\15\33\24\0\10\33\1\u0234\17\33"+
    "\1\0\3\33\1\0\15\33\24\0\30\33\1\0\1\u025e"+
    "\2\33\1\0\15\33\24\0\17\33\1\u0187\10\33\1\0"+
    "\3\33\1\0\15\33\24\0\21\33\1\65\6\33\1\0"+
    "\3\33\1\0\15\33\24\0\11\33\1\u025f\16\33\1\0"+
    "\3\33\1\0\15\33\24\0\15\33\1\u0260\12\33\1\0"+
    "\3\33\1\0\15\33\24\0\10\33\1\u0261\17\33\1\0"+
    "\3\33\1\0\15\33\24\0\1\u0262\27\33\1\0\3\33"+
    "\1\0\15\33\24\0\2\33\1\u0263\25\33\1\0\3\33"+
    "\1\0\15\33\24\0\26\33\1\u0264\1\33\1\0\3\33"+
    "\1\0\15\33\24\0\7\33\1\u0265\20\33\1\0\3\33"+
    "\1\0\15\33\24\0\20\33\1\u017c\7\33\1\0\3\33"+
    "\1\0\15\33\34\0\1\u0266\65\0\11\33\1\u0267\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\2\33\1\u0268\25\33"+
    "\1\0\3\33\1\0\15\33\24\0\3\33\1\u0269\24\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\311\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\25\33\1\u026a\2\33"+
    "\1\0\3\33\1\0\15\33\24\0\7\33\1\u026b\20\33"+
    "\1\0\3\33\1\0\15\33\24\0\15\33\1\u026c\12\33"+
    "\1\0\3\33\1\0\15\33\24\0\5\33\1\u026d\22\33"+
    "\1\0\3\33\1\0\15\33\24\0\10\33\1\u026e\17\33"+
    "\1\0\3\33\1\0\15\33\24\0\21\33\1\u023d\6\33"+
    "\1\0\3\33\1\0\15\33\24\0\10\33\1\376\17\33"+
    "\1\0\3\33\1\0\15\33\24\0\21\33\1\376\6\33"+
    "\1\0\3\33\1\0\15\33\45\0\1\u026f\54\0\6\33"+
    "\1\u0268\21\33\1\0\3\33\1\0\15\33\24\0\10\33"+
    "\1\u0183\17\33\1\0\3\33\1\0\15\33\24\0\1\u0270"+
    "\27\33\1\0\3\33\1\0\15\33\24\0\2\33\1\u0271"+
    "\17\33\1\u0272\5\33\1\0\3\33\1\0\15\33\24\0"+
    "\2\33\1\u0273\25\33\1\0\3\33\1\0\15\33\24\0"+
    "\7\33\1\203\20\33\1\0\3\33\1\0\15\33\24\0"+
    "\23\33\1\170\4\33\1\0\3\33\1\0\15\33\24\0"+
    "\25\33\1\u0274\2\33\1\0\3\33\1\0\15\33\24\0"+
    "\12\33\1\u0275\15\33\1\0\3\33\1\0\15\33\24\0"+
    "\6\33\1\u0276\21\33\1\0\3\33\1\0\15\33\24\0"+
    "\12\33\1\313\15\33\1\0\3\33\1\0\15\33\24\0"+
    "\5\33\1\u0151\1\u0277\4\33\1\361\14\33\1\0\3\33"+
    "\1\0\15\33\24\0\14\33\1\262\13\33\1\0\3\33"+
    "\1\0\15\33\24\0\10\33\1\u026e\14\33\1\u0278\2\33"+
    "\1\0\3\33\1\0\15\33\24\0\6\33\1\u0253\21\33"+
    "\1\0\3\33\1\0\15\33\24\0\3\33\1\u0124\24\33"+
    "\1\0\3\33\1\0\15\33\40\0\1\u0279\61\0\5\33"+
    "\1\u027a\22\33\1\0\3\33\1\0\15\33\24\0\11\33"+
    "\1\u027b\16\33\1\0\3\33\1\0\15\33\24\0\7\33"+
    "\1\u027c\20\33\1\0\3\33\1\0\15\33\24\0\3\33"+
    "\1\u027d\24\33\1\0\3\33\1\0\15\33\24\0\16\33"+
    "\1\u027e\7\33\1\u027f\1\33\1\0\3\33\1\0\15\33"+
    "\24\0\6\33\1\u020c\21\33\1\0\3\33\1\0\15\33"+
    "\24\0\1\u0105\27\33\1\0\3\33\1\0\15\33\24\0"+
    "\11\33\1\u0280\16\33\1\0\3\33\1\0\15\33\24\0"+
    "\11\33\1\u0281\16\33\1\0\3\33\1\0\15\33\27\0"+
    "\1\u0282\72\0\13\33\1\u017f\14\33\1\0\3\33\1\0"+
    "\15\33\24\0\26\33\1\u0283\1\33\1\0\3\33\1\0"+
    "\15\33\24\0\15\33\1\u0284\12\33\1\0\3\33\1\0"+
    "\15\33\24\0\5\33\1\u0285\22\33\1\0\3\33\1\0"+
    "\15\33\24\0\3\33\1\u0286\24\33\1\0\3\33\1\0"+
    "\15\33\24\0\11\33\1\u0287\16\33\1\0\3\33\1\0"+
    "\15\33\24\0\26\33\1\u0288\1\33\1\0\3\33\1\0"+
    "\15\33\24\0\12\33\1\u0289\15\33\1\0\3\33\1\0"+
    "\15\33\31\0\1\u028a\70\0\11\33\1\u028b\16\33\1\0"+
    "\3\33\1\0\15\33\24\0\23\33\1\u028c\4\33\1\0"+
    "\3\33\1\0\15\33\24\0\14\33\1\300\13\33\1\0"+
    "\3\33\1\0\15\33\24\0\5\33\1\u011b\22\33\1\0"+
    "\3\33\1\0\15\33\24\0\12\33\1\u017e\15\33\1\0"+
    "\3\33\1\0\15\33\24\0\7\33\1\u028d\20\33\1\0"+
    "\3\33\1\0\15\33\24\0\2\33\1\u017c\25\33\1\0"+
    "\3\33\1\0\15\33\47\0\1\u0266\52\0\4\33\1\u028e"+
    "\23\33\1\0\3\33\1\0\15\33\24\0\16\33\1\u028f"+
    "\11\33\1\0\3\33\1\0\15\33\24\0\2\33\1\u01db"+
    "\25\33\1\0\3\33\1\0\15\33\24\0\1\u0290\27\33"+
    "\1\0\3\33\1\0\15\33\24\0\14\33\1\u0291\13\33"+
    "\1\0\3\33\1\0\15\33\24\0\14\33\1\u0292\13\33"+
    "\1\0\3\33\1\0\15\33\24\0\1\u0293\27\33\1\0"+
    "\3\33\1\0\15\33\24\0\11\33\1\u0294\16\33\1\0"+
    "\3\33\1\0\15\33\24\0\2\33\1\u0295\25\33\1\0"+
    "\3\33\1\0\15\33\24\0\6\33\1\u0296\21\33\1\0"+
    "\3\33\1\0\15\33\24\0\7\33\1\u0297\20\33\1\0"+
    "\3\33\1\0\15\33\24\0\15\33\1\u0298\12\33\1\0"+
    "\3\33\1\0\15\33\24\0\6\33\1\u0276\4\33\1\u0299"+
    "\14\33\1\0\3\33\1\0\15\33\24\0\7\33\1\u029a"+
    "\20\33\1\0\3\33\1\0\15\33\24\0\6\33\1\u029b"+
    "\21\33\1\0\3\33\1\0\15\33\24\0\1\u029c\27\33"+
    "\1\0\3\33\1\0\15\33\24\0\11\33\1\u029d\16\33"+
    "\1\0\3\33\1\0\15\33\24\0\4\33\1\u029e\23\33"+
    "\1\0\3\33\1\0\15\33\24\0\2\33\1\u0297\25\33"+
    "\1\0\3\33\1\0\15\33\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40238];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\2\1\1\11\201\1\1\0"+
    "\3\1\2\0\1\1\2\0\225\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\50\1\1\0\120\1\1\0"+
    "\2\1\1\0\34\1\1\0\107\1\1\0\46\1\1\0"+
    "\16\1\1\0\10\1\1\11\10\1\1\0\11\1\1\0"+
    "\10\1\1\0\7\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[670];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public int Lineas(java.io.Reader reader) 
    {
        return yyline;
    }
    public int Columnas(java.io.Reader reader) 
    {
        return yycolumn;
    }
    public String Texto;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  F1_MiniSQL(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Texto = yytext(); return ERROR;
            }
          case 11: break;
          case 2: 
            { Texto = yytext(); return IDENTIFICADOR;
            }
          case 12: break;
          case 3: 
            { Texto = yytext(); return OPERADOR;
            }
          case 13: break;
          case 4: 
            { /*Ignore*/
            }
          case 14: break;
          case 5: 
            { Texto = yytext(); return ENTERO;
            }
          case 15: break;
          case 6: 
            { Texto = yytext(); return PALABRA_RESERVADA;
            }
          case 16: break;
          case 7: 
            { Texto = yytext(); return DECIMAL;
            }
          case 17: break;
          case 8: 
            { Texto = yytext(); return CADENA;
            }
          case 18: break;
          case 9: 
            { Texto = yytext(); return HEXADECIMAL;
            }
          case 19: break;
          case 10: 
            { Texto = yytext(); return BOOLEANO;
            }
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
